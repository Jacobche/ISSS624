---
title: "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods"
execute: 
  warning: false
  message: false
  echo: false
editor: visual
---

## The Task

The specific tasks of this take-home exercise are as follows:

-   Using appropriate **sf** method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. We can use any one of them.

-   Using appropriate **tidyr** and **dplyr** methods, derive the proportion of functional and non-functional water point at LGA level (i.e. ADM2).

-   Combining the geospatial and aspatial data frame into simple feature data frame.

-   Delineating water point measures functional regions by using conventional hierarchical clustering.

-   Delineating water point measures functional regions by using spatially constrained clustering algorithms.

### Thematic Mapping

-   Plot to show the water points measures derived by using appropriate statistical graphics and choropleth mapping technique.

### Analytical Mapping

-   Plot functional regions delineated by using both non-spatially constrained and spatially constrained clustering algorithms.

## Overview

The process of creating regions is called [regionalisation](https://www.researchgate.net/publication/28153673_Supervised_Regionalization_Methods_A_Survey/link/0fcfd5094046b13d35000000/download). A regionalisation is a special kind of clustering where the objective is to group observations which are similar in their statistical attributes, but also in their spatial location.

In this take-home exercise, we are required to regionalise Nigeria by using, but not limited to the following measures:

-   Total number of functional water points

-   Total number of nonfunctional water points

-   Percentage of functional water points

-   Percentage of non-functional water points

-   Percentage of main water point technology (i.e. Hand Pump)

-   Percentage of usage capacity (i.e. \< 1000, \>=1000)

-   Percentage of rural water points

## Installing & Loading R Packages

In the code chunk below, *p_load()* of **pacman** package is used to install and load the following R packages into R environment.

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep)
```

## The Data

### Aspatial data

For the purpose of this exercise, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. We are required to use WPdx+ data set.

### Geospatial data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this exercise. The data can be downloaded either from The [Humanitarian Data Exchange](https://data.humdata.org/) portal or [geoBoundaries](https://www.geoboundaries.org/).

### Importing water point data

First, we are going to import the water point data into R environment.

```{r}
#| eval: false
wp_nga <- read_csv("rawdata/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

Thing to learn from the code chunk above:

-   The original file name is called `Water_Point_Data_Exchange_-_PlusWPdx.csv`, it has been rename to `WPdx.csv` for easy encoding.

-   Instead of using *read.csv()* of Base R to import the csv file into R, *read_csv()* is **readr** package is used. This is because during the initial data exploration, we notice that there is at least one field name with space between the field name (ie. *New Georeferenced Column*).

-   The data file contains water point data of many countries. In this study, we are interested on water point in Nigeria. Hence, *filter()* of **dplyr** is used to extract out records belonging to Nigeria only.

Next, *write_rds()* of **readr** package is used to save the extracted data table (i.e. `wp`) into an output file in rds data format. The output file is called `wpdx_nga.rds` and it is saved in rawdata sub-folder, which will not be uploaded to Git.

```{r}
#| eval: false
wpdx_nga <- write_rds(wp_nga, 
                    "rawdata/wpdx_nga.rds")
```

```{r}
wpdx_nga <- read_rds("rawdata/wpdx_nga.rds")
```

#### Convert wkt data

After the data are imported into R environment, it is a good practice to review both the data structure and the data table if it is in tibble data frame format in R Studio.

```{r}
wpdx_nga
```

Notice that the newly imported tibble data frame (i.e. `wpdx_nga`) contains a field called `New Georeferenced Column` which represent spatial data in a textual format. In fact, this kind of text file is popularly known as **Well Known Text** in short **wkt**.

Two steps will be used to convert an asptial data file in wkt format into a sf data frame by using **sf**.

First, *st_as_sfc()* of **sf** package is used to derive a new field called `Geometry` as shown in the code chunk below.

```{r}
wpdx_nga$Geometry = st_as_sfc(wpdx_nga$`New Georeferenced Column`)
```

If we check the `wpdx_nga` data frame and scroll to the last field now, we will see a new field called `Geometry` has been added.

Next, *st_sf()* will be used to convert the tibble data frame into sf data frame.

```{r}
wpdx_sf <- st_sf(wpdx_nga, crs=4326) 
```

The code chunk below reveals the complete information of a feature object by using [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R.

```{r}
head(wpdx_sf, n=5)
```

### Importing Nigeria LGA level boundary data

For the purpose of this exercise, shapefile downloaded from [geoBoundaries](https://www.geoboundaries.org/) portal will be used.

```{r}
nga <- st_read(dsn = "data",
               layer = "geoBoundaries-NGA-ADM2",
               crs = 4326) %>%
  select(shapeName)
```

### Correcting duplicated LGAs

The code chunk below (as used by [Jordan](https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#data-wrangling)) uses *duplicated()* of base R which has identified 12 LGAs (ie `shapeName`) having duplicates.

```{r}
nga <- (nga[order(nga$shapeName), ])

nga_dup <- nga$shapeName[nga$shapeName %in% nga$shapeName[duplicated(nga$shapeName)] ]

nga_dup
```

After some research, the corrected index and shapeName should be as follows:

| Index | shapeName      |
|-------|----------------|
| 94    | Bassa Kogi     |
| 95    | Bassa Plateau  |
| 304   | Ifelodun Kwara |
| 305   | Ifelodun Osun  |
| 355   | Irepodun Kwara |
| 356   | Irepodun Osun  |
| 519   | Nasarawa Kano  |
| 520   | Nasarawa       |
| 546   | Obi Benue      |
| 547   | Obi Nasarawa   |
| 693   | Surulere Lagos |
| 694   | Surulere Oyo   |

The code chunk below is used to correct the respective `shapeName` values.

```{r}
nga$shapeName[c(94,95,304,305,355,356,519,520,546,547,693,694)] <- 
  c("Bassa Kogi","Bassa Plateau","Ifelodun Kwara","Ifelodun Osun",
    "Irepodun Kwara","Irepodun Osun","Nassarawa Kano","Nassarawa",
    "Obi Benue","Obi Nasarawa","Surulere Lagos","Surulere Oyo")
```

The code chunk below uses *length()* of base R to validate that there are no more duplicates in LGAs.

```{r}
length((nga$shapeName[ nga$shapeName %in% nga$shapeName[duplicated(nga$shapeName)] ]))
```

## Point in Polygon Overlay

Although `wpdx_sf` sf data frame consists of a field called `#clean_adm2` which by right should provide the LGA names of the water points located. However, it is always a good practice to be more causcious when dealing with data accuracy.

In this section, we are going to use a geoprocessing function (or commonly know as GIS analysis) called **point-in-polygon overlay** to transfer the attribute information in `nga` sf data frame into `wpdx_sf` data frame. The code chunk below uses *st_join()* of **sf** package to perform a join and a new field called `shapeName` is now added to `wpdx_sf` sf data frame.

```{r}
wpdx_sf <- st_join(wpdx_sf, nga)
```

## Data Wrangling

### Recoding NA values into string

In the code chunk below, *replace_na()* is used to recode all the *NA* values in `#status_clean` and `#water_tech_category` fields into *Unknown*.

```{r}
wpdx_sf <- wpdx_sf %>%
  mutate(`#status_clean` = replace_na(`#status_clean`, "Unknown")) %>%
  mutate(`#water_tech_category` = replace_na(`#water_tech_category`, "Unknown"))
```

### Extracting useful data points

In the code chunk below, *filter()* of **dplyr** is used to select water points of various `#status_clean`.

```{r}
func_wp <- wpdx_sf %>%
  filter(`#status_clean` %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
nonfunc_wp <- wpdx_sf %>%
  filter(`#status_clean` %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
unknown_wp <- wpdx_sf %>%
  filter(`#status_clean` == "Unknown")
```

In the code chunk below, we will check the proportions in `#water-tech-category` and then use *filter()* of **dplyr** to select water points of sizable proportions.

```{r}

data_1 <- wpdx_sf %>%
  group_by(`#water_tech_category`) %>%
  summarise(count = n())

ggplot(data_1, aes(x = "", y = count, fill = `#water_tech_category`)) +
  geom_col(color = "black") +
  geom_label(aes(label = count),
             color = "white",
             position = position_stack(vjust = 0.5),
             show.legend = FALSE) +
  coord_polar(theta = "y")
```

```{r}
handpump_wp <- wpdx_sf %>%
  filter(`#water_tech_category` == "Hand Pump")

mechanized_wp <- wpdx_sf %>%
  filter(`#water_tech_category` == "Mechanized Pump")
```

In the code chunk below, *filter()* of **dplyr** is used to select water points of `usage_capacity` \>=1000 and those \<1000.

```{r}
highusage_wp <- wpdx_sf %>%
  filter(usage_capacity >= 1000)

lowusage_wp <- wpdx_sf %>%
  filter(usage_capacity < 1000)
```

In the code chunk below, *filter()* of **dplyr** is used to select water points of `is_urban` = False and those = True.

```{r}
rural_wp <- wpdx_sf %>%
  filter(is_urban == FALSE)

urban_wp <- wpdx_sf %>%
  filter(is_urban  == TRUE)
```

### Performing Point-in-Polygon Count

The code chunk below performs two operations at one go. Firstly, identify water points located inside each LGA by using [*st_intersects()*](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of water points that fall inside each LGA.

```{r}
nga_wp <- nga %>% 
  mutate(total_wp = lengths(
    st_intersects(nga, wpdx_sf))) %>%
  mutate(func_wp = lengths(
    st_intersects(nga, func_wp))) %>%
  mutate(nonfunc_wp = lengths(
    st_intersects(nga, nonfunc_wp))) %>%
  mutate(unknown_wp = lengths(
    st_intersects(nga, unknown_wp))) %>%
  mutate(handpump_wp = lengths(
    st_intersects(nga, handpump_wp))) %>%
  mutate(mechanized_wp = lengths(
    st_intersects(nga, mechanized_wp))) %>%
  mutate(highusage_wp = lengths(
    st_intersects(nga, highusage_wp))) %>%
  mutate(lowusage_wp = lengths(
    st_intersects(nga, lowusage_wp))) %>%
  mutate(rural_wp = lengths(
    st_intersects(nga, rural_wp))) %>%
  mutate(urban_wp = lengths(
    st_intersects(nga, urban_wp)))
```

### Derive new variables using **dplyr** package

```{r}
nga_wp_derived <- nga_wp %>%
  mutate(func_perc = func_wp/total_wp) %>%
  mutate(nonfunc_perc = nonfunc_wp/total_wp) %>%
  mutate(handpump_perc = handpump_wp/total_wp) %>%
  mutate(mechanized_perc = mechanized_wp/total_wp) %>%
  mutate(highusag_perc = highusage_wp/total_wp) %>%
  mutate(lowusage_perc = lowusage_wp/total_wp) %>%
  mutate(rural_perc = rural_wp/total_wp) %>%
  mutate(urban_perc = urban_wp/total_wp) %>% 
  select(1:2, 4:5, 13:20)

```
