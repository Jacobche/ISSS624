---
title: "Take-home Exercise 1: Geospatial Analytics for Social Good"
execute: 
  warning: false
  message: false
editor: visual
---

## The Task

The specific tasks of this take-home exercise are as follows:

-   Using appropriate **sf** method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. We can use any one of them.

-   Using appropriate **tidyr** and **dplyr** methods, derive the proportion of functional and non-functional water point at LGA level.

-   Combining the geospatial and aspatial data frame into simple feature data frame.

-   Performing outliers/clusters analysis by using appropriate local measures of spatial association methods.

-   Performing hotspot areas analysis by using appropriate local measures of spatial association methods.

### Thematic Mapping

-   Plot maps to show the spatial distribution of functional and non-functional water point rate at Local Government Area (LGA) level by using appropriate thematic mapping technique provided by **tmap** package.

### Analytical Mapping

-   Plot hotspot areas and outliers/clusters maps of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by **tmap** package.

## Overview

Geospatial analytics hold tremendous potential to address complex problems faced by society. In this study, we are tasked to apply appropriate global and local measures of spatial association techniques to reveals the spatial patterns of non-functional water points. For the purpose of this study, Nigeria will be used as the study country.

## Installing & Loading R Packages

In the code chunk below, *p_load()* of **pacman** package is used to install and load the following R packages into R environment:

-   **sf**

-   **tidyverse**

-   **tmap**

-   **spdep**

-   **funModeling**, to be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
```

## The Data

### Aspatial data

For the purpose of this exercise, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. We are required to use WPdx+ data set.

### Geospatial data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this exercise. The data can be downloaded either from The [Humanitarian Data Exchange](https://data.humdata.org/) portal or [geoBoundaries](https://www.geoboundaries.org/).

## Importing Geospatial Data

Two geospatial data sets used are:

-   `geo_export`

-   `nga_admbnda_adm2_osgof_20190417`

### Importing water point geospatial data

First, we are going to import the water point geospatial data (i.e. `geo_export`) by using the code chunk below.

(Since we have previously used this data set in the in-class exercise, we will use the data directly from there.)

```{r}
#| eval: false
wp <- st_read(dsn = "C:/Jacobche/ISSS624/In-class_Ex/rawdata",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Things to learn from the code chunk above:

-   *st_read()* of **sf** package is used to import `geo_export` shapefile into R environment and save the imported geospatial data into simple feature data table.

-   *filter()* of **dplyr** package is used to extract water point records of Nigeria only.

Note: Avoid performing transformation if you plan to use *st_intersects()* of **sf** package in the later stage of the geoprocessing. This is because *st_intersects()* only works correctly if the geospatial data are in geographic coordinate system (i.e **wgs84**).

Next, *write_rds()* of **readr** package is used to save the extracted sf data table (i.e. `wp`) into an output file in rds data format. The output file is called `wp_nga.rds` and it is saved in rawdata sub-folder, which will not be uploaded to Git.

```{r}
#| eval: false
wp_nga <- write_rds(wp,
                    "C:/Jacobche/ISSS624/In-class_Ex/rawdata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

Now, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r}
nga <- st_read(dsn = "C:/Jacobche/ISSS624/In-class_Ex/data",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326)
```

Thing to learn from the code chunk above.

-   *st_read()* of **sf** package is used to import `nga_admbnda_adm2_osgof_20190417` shapefile into R environment and save the imported geospatial data into simple feature data table.

## Data Wrangling

### Recoding NA values into string

In the code chunk below, *replace_na()* is used to recode all the *NA* values in `status_cle` field into *Unknown*.

```{r}
wp_nga <- read_rds("C:/Jacobche/ISSS624/In-class_Ex/rawdata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### Exploratory Data Analysis

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wp_nga`.

```{r}
freq(data=wp_nga, 
     input = 'status_cle')
```

## Extracting Water Point Data

In this section, we will extract the water point records by using classes in `status_cle` field.

### Extracting functional water point

In the code chunk below, *filter()* of **dplyr** is used to select functional water points.

```{r}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

### Exploratory Data Analysis (functional)

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wpt_functional`.

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

### Extracting non-functional water point

In the code chunk below, *filter()* of **dplyr** is used to select non-functional water points.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

### Exploratory Data Analysis (non-functional)

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wpt_nonfunctional`.

```{r}
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### Extracting water point with Unknown class

In the code chunk below, *filter()* of **dplyr** is used to select water points with `unknown` status.

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing Point-in-Polygon Count

The code chunk below performs two operations at one go. Firstly, identify water points located inside each LGA by using [*st_intersects()*](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of water points that fall inside each LGA.

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

The code chunk below computes the proportion of functional and non-functional water point at LGA level.

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Things to learn from the code chunk above:

-   *mutate()* of **dplyr** package is used to derive two fields namely `pct_functional` and `pct_non-functional`.

-   to keep the file size small, *select()* of **dplyr** is used to retain only fields 3, 4, 9, 10, 18, 19, 20, 21, 22 and 23.

Now, we have the tidy sf data table for subsequent analysis. We will save the sf data table into rds format.

```{r}
write_rds(nga_wp, "C:/Jacobche/ISSS624/In-class_Ex/data/nga_wp.rds")
```

## Visualising the spatial distribution of water points

The code below uses *qtm()* of **tmap** package to plot side-by-side choropleth maps showing the spatial water points distribution by LGA levels in Nigeria.

```{r}
nga_wp <- read_rds("C:/Jacobche/ISSS624/In-class_Ex/data/nga_wp.rds")
total <- qtm(nga_wp, "total wpt") +
  tm_layout(scale = 0.7)
wp_functional <- qtm(nga_wp, "wpt functional")+
  tm_layout(scale = 0.7)
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")+
  tm_layout(scale = 0.6)
unknown <- qtm(nga_wp, "wpt unknown")+
  tm_layout(scale = 0.7)

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, nrow=2, ncol=2)
```

Next we will create an interactive choropleth map for non-functional water points which would allow us to zoom in for a closer look.

```{r}
tmap_mode("view")

tm_shape(nga_wp) + 
  tm_polygons("wpt non-functional", 
              breaks = c(0, 71, 141, 211, 280),
              palette = "Reds") +
  tm_layout(title= "Spatial Distribution of Non-functional Water Points") +
  tm_scale_bar()

tmap_mode("plot")
```

From the map, we can see that the distribution of non-functional water points is not even with LGAs like Ifelodun and Igabi having a higher concentration than others. Nevertheless, there seem to be areas where they are clustered - i.e. around the Central and Western region of Nigeria.
