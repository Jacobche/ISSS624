---
title: "Take-home Exercise 1: Geospatial Analytics for Social Good"
execute: 
  warning: false
  message: false
editor: visual
---

## The Task

The specific tasks of this take-home exercise are as follows:

-   Using appropriate **sf** method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. We can use any one of them.

-   Using appropriate **tidyr** and **dplyr** methods, derive the proportion of functional and non-functional water point at LGA level.

-   Combining the geospatial and aspatial data frame into simple feature data frame.

-   Performing outliers/clusters analysis by using appropriate local measures of spatial association methods.

-   Performing hotspot areas analysis by using appropriate local measures of spatial association methods.

### Thematic Mapping

-   Plot maps to show the spatial distribution of functional and non-functional water point rate at Local Government Area (LGA) level by using appropriate thematic mapping technique provided by **tmap** package.

### Analytical Mapping

-   Plot hotspot areas and outliers/clusters maps of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by **tmap** package.

## Overview

Geospatial analytics hold tremendous potential to address complex problems faced by society. In this study, we are tasked to apply appropriate global and local measures of spatial association techniques to reveals the spatial patterns of non-functional water points. For the purpose of this study, Nigeria will be used as the study country.

## Installing & Loading R Packages

In the code chunk below, *p_load()* of **pacman** package is used to install and load the following R packages into R environment:

-   **sf**

-   **tidyverse**

-   **tmap**

-   **spdep**

-   **funModeling**, to be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling, DT)
```

## The Data

### Aspatial data

For the purpose of this exercise, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. We are required to use WPdx+ data set.

### Geospatial data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this exercise. The data can be downloaded either from The [Humanitarian Data Exchange](https://data.humdata.org/) portal or [geoBoundaries](https://www.geoboundaries.org/).

## Importing Geospatial Data

Two geospatial data sets used are:

-   `geo_export`

-   `nga_admbnda_adm2_osgof_20190417`

### Importing water point geospatial data

First, we are going to import the water point geospatial data (i.e. `geo_export`) by using the code chunk below.

(Since we have previously used this data set in the in-class exercise, we will use the data directly from there.)

```{r}
#| eval: false
wp <- st_read(dsn = "C:/Jacobche/ISSS624/In-class_Ex/rawdata",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Things to learn from the code chunk above:

-   *st_read()* of **sf** package is used to import `geo_export` shapefile into R environment and save the imported geospatial data into simple feature data table.

-   *filter()* of **dplyr** package is used to extract water point records of Nigeria only.

Note: Avoid performing transformation if you plan to use *st_intersects()* of **sf** package in the later stage of the geoprocessing. This is because *st_intersects()* only works correctly if the geospatial data are in geographic coordinate system (i.e **wgs84**).

Next, *write_rds()* of **readr** package is used to save the extracted sf data table (i.e. `wp`) into an output file in rds data format. The output file is called `wp_nga.rds` and it is saved in rawdata sub-folder, which will not be uploaded to Git.

```{r}
#| eval: false
wp_nga <- write_rds(wp,
                    "C:/Jacobche/ISSS624/In-class_Ex/rawdata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

Now, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r}
nga <- st_read(dsn = "C:/Jacobche/ISSS624/In-class_Ex/data",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326)
```

Thing to learn from the code chunk above.

-   *st_read()* of **sf** package is used to import `nga_admbnda_adm2_osgof_20190417` shapefile into R environment and save the imported geospatial data into simple feature data table.

## Data Wrangling

### Recoding NA values into string

In the code chunk below, *replace_na()* is used to recode all the *NA* values in `status_cle` field into *Unknown*.

```{r}
wp_nga <- read_rds("C:/Jacobche/ISSS624/In-class_Ex/rawdata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### Exploratory Data Analysis

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wp_nga`.

```{r}
freq(data=wp_nga, 
     input = 'status_cle')
```

## Extracting Water Point Data

In this section, we will extract the water point records by using classes in `status_cle` field.

### Extracting functional water point

In the code chunk below, *filter()* of **dplyr** is used to select functional water points.

```{r}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

### Exploratory Data Analysis (functional)

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wpt_functional`.

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

### Extracting non-functional water point

In the code chunk below, *filter()* of **dplyr** is used to select non-functional water points.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

### Exploratory Data Analysis (non-functional)

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wpt_nonfunctional`.

```{r}
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### Extracting water point with Unknown class

In the code chunk below, *filter()* of **dplyr** is used to select water points with `unknown` status.

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing Point-in-Polygon Count

The code chunk below performs two operations at one go. Firstly, identify water points located inside each LGA by using [*st_intersects()*](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of water points that fall inside each LGA.

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

The code chunk below computes the proportion of functional and non-functional water point at LGA level.

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Things to learn from the code chunk above:

-   *mutate()* of **dplyr** package is used to derive two fields namely `pct_functional` and `pct_non-functional`.

-   to keep the file size small, *select()* of **dplyr** is used to retain only fields 3, 4, 9, 10, 18, 19, 20, 21, 22 and 23.

Now, we have the tidy sf data table for subsequent analysis. We will save the sf data table into rds format.

```{r}
write_rds(nga_wp, "C:/Jacobche/ISSS624/In-class_Ex/data/nga_wp.rds")
```

## Visualising the spatial distribution of water points

The code below uses *qtm()* of **tmap** package to plot side-by-side choropleth maps showing the spatial water points distribution by LGA levels in Nigeria.

```{r}
nga_wp <- read_rds("C:/Jacobche/ISSS624/In-class_Ex/data/nga_wp.rds")
total <- qtm(nga_wp, "total wpt") +
  tm_layout(scale = 0.7)
wp_functional <- qtm(nga_wp, "wpt functional")+
  tm_layout(scale = 0.7)
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")+
  tm_layout(scale = 0.6)
unknown <- qtm(nga_wp, "wpt unknown")+
  tm_layout(scale = 0.7)

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, nrow=2, ncol=2)
```

Next we will create an interactive choropleth map for non-functional water points which would allow us to zoom in for a closer look.

```{r}
tmap_mode("view")

tm_shape(nga_wp) + 
  tm_polygons("wpt non-functional", 
              breaks = c(0, 71, 141, 211, 280),
              palette = "Reds") +
  tm_layout(title= "Spatial Distribution of Non-functional Water Points") +
  tm_scale_bar()

tmap_mode("plot")
```

From the map, we can see that the distribution of non-functional water points is not even with LGAs like Ifelodun and Igabi having a higher concentration than others. Nevertheless, there seem to be areas where they are clustered - i.e. around the Central and Western region of Nigeria.

## Global Spatial Autocorrelation

In order to confirm our observation of signs of spatial clustering, we will make use of global autocorrection technique. We will compute the global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.

### Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. LGA) in the study area.

The code chunk below uses [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute the Queen contiguity weight matrix for Nigeria.

```{r}
wm_q <- poly2nb(nga_wp, 
                queen=TRUE)

set.ZeroPolicyOption(TRUE)

summary(wm_q)
```

The summary report above shows that there are 774 LGAs in Nigeria. The most connected LGA has 14 neighbours. There are two LGAs with only one neighbours.

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W").

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

### Global Spatial Autocorrelation: Moran's I

#### Maron's I test

The code chunk below performs Moran's I statistical testing using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(nga_wp$`wpt non-functional`,
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

From the Moran's I test since the p-value \< 2.2e-16 which is approximately 0, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of non-functional water points in the LGAs are not randomly distributed. As the Moran I statistic = 0.433932927 \> 0, we can infer that there is sign of "clustered" spatial pattern.

#### Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran's I statistic by using [*moran.mc()*](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(nga_wp$`wpt non-functional`,
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

From the Monte Carlo simulation since the p-value = 0.001, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of non-functional water points in the LGAs are not randomly distributed. As the Moran I statistic = 0.43393 \> 0, we can infer that there is sign of "clustered" spatial pattern.

### Global Spatial Autocorrelation: Geary's

#### Geary's C test

The code chunk below performs Geary's C test for spatial autocorrelation by using [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(nga_wp$`wpt non-functional`, listw=rswm_q)
```

From the Geary's C test since the p-value \< 2.2e-16 which is approximately 0, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of non-functional water points in the LGAs are not randomly distributed. As the Geary C statistic = 0.6170907765 \< 1, we can again infer that there is sign of "clustered" spatial pattern.

#### Computing Monte Carlo Geary's C

The code chunk below performs permutation test for Geary's C statistic by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(nga_wp$`wpt non-functional`, 
               listw=rswm_q, 
               nsim=999)
bperm
```

From the Monte Carlo simulation since the p-value = 0.001, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of non-functional water points in the LGAs are not randomly distributed. As the Geary C statistic = 0.61709 \< 1, we can again infer that there is sign of "clustered" spatial pattern.

## Cluster and Outlier Analysis

Local Indicators of Spatial Association (LISA) are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. We will apply appropriate LISA, especially the local Moran's I to detect cluster and/or outlier from non-functional water points of Nigeria.

### Computing local Moran's I

To compute local Moran's I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values. The code chunks below are used to compute local Moran's I of non-functional water points at the LGA level.

```{r}
fips <- order(nga_wp$ADM2_EN)
localMI <- localmoran(nga_wp$`wpt non-functional`, rswm_q)
head(localMI)
```

The code chunk below lists the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat). Additionally, [*paste()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/paste) of base R is used since `ADM2_EN` contains duplicated name but from different `ADM2_PCODE`.

```{r}
temp <- data.frame(localMI[fips,],
                   row.names = paste(nga_wp$ADM2_PCODE,nga_wp$ADM2_EN)[fips]) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)

printCoefmat(temp, digits = 4,
             check.names=FALSE) 
```

#### Mapping the local Moran's I

Before mapping the local Moran's I map, it is wise to append the local Moran's I dataframe (i.e. `localMI`) onto `nga_wp` SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called `nga_wp.localMI`.

```{r}
nga_wp.localMI <- cbind(nga_wp,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### Mapping local Moran's I values

Using choropleth mapping functions of **tmap** package, we can plot the local Moran's I values by using the code chinks below.

```{r}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "Local Moran's Statistics") +
  tm_borders(alpha = 0.5)
```

#### Mapping local Moran's I p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as considered above. The code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package.

```{r}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### Mapping both local Moran's I values and p-values

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

```{r}
localMI.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "Local Moran's Statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(scale = 0.7)

pvalue.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(scale = 0.7)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### Plotting Moran scatterplot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations. The code chunk below plots the Moran scatterplot of non-functional water points by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
nci <- moran.plot(nga_wp$`wpt non-functional`, rswm_q,
                  labels=as.character(nga_wp$ADM2_EN), 
                  xlab="Non-functional Water Points", 
                  ylab="Spatially Lag Non-functional Water Points")
```

Notice that the plot is split into 4 quadrants. The top right corner belongs to areas that have high numbers of non-functional water points and are surrounded by other areas that have the average numbers of non-functional water points. These are the high-high locations.

### Plotting Moran scatterplot with standardised variable

The code below is used to plot the Moran scatterplot after applying [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable `wpt non-functional`.

```{r}
nga_wp$Z.NFWP <- scale(nga_wp$`wpt non-functional`) %>% as.vector

nci2 <- moran.plot(nga_wp$Z.NFWP, rswm_q,
                   labels=as.character(nga_wp$ADM2_EN),
                   xlab="z-Non-functional Water Points", 
                   ylab="Spatially Lag z-Non-functional Water Points")
```

### Preparing LISA map classes

The code chunks below shows the steps to prepare a LISA cluster map which involves the following:

-   To derive the spatially lagged variable of interest (i.e. `wpt non-functional`) and center the spatially lagged variable around its mean

-   To center the local Moran's around the mean

-   To set a statistical significance level for the local Moran

-   To define the high-high, low-low, low-high and high-low categories

-   To places non-significant Moran in the category 0

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
nga_wp$lag_NFWP <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)
DV <- nga_wp$lag_NFWP - mean(nga_wp$lag_NFWP)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

### Plotting LISA map

The code chunk below is used to build the LISA map.

```{r}
nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot the choropleth map showing the non-functional water points distribution and the LISA map next to each other.

```{r}
nfwpc <- qtm(nga_wp, "wpt non-functional") +
  tm_layout(scale = 0.7)

nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) +
  tm_layout(scale = 0.7)

tmap_arrange(nfwpc, LISAmap, asp=1, ncol=2)
```

We can see from the LISA map that there's a high-high cluster indicating positive autocorrelation for the LGAs having adjacent high numbers of non-functional water points. There is also a low-high cluster indicating negative autocorrelation/outliers whereby those LGAs with low numbers of non-functional water points are surrounded by those with high numbers of non-functional water points. And clearly the eastern region is very much a low-low cluster having adjacent low numbers of non-functional water points.

## Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can also be used to detect hot spot and/or cold spot areas. The term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.

### Getis and Ord's G-Statistics

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics. It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

### Deriving distance-based weight matrix

Firstly, we need to define a new set of neighbours. While the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on adaptive distance weight matrix here for the case of LGAs in NIgeria.

#### Deriving the centroid

The code chunk below uses *cbind()* to put longitude and latitude into the same object for the centroid.

```{r}
longitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

### Computing adaptive distance weight matrix

We can control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

### Gi statistics using adaptive distance

The code chunk below is used to compute the Gi values for `wpt non-functional` by using an adaptive distance weight matrix (i.e `knn_lw`).

```{r}
fips <- order(nga_wp$ADM2_EN)
gi.adaptive <- localG(nga_wp$`wpt non-functional`, knn_lw)
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

It is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using adaptive distance weight matrix.

```{r}
nfwpc <- qtm(nga_wp, "wpt non-functional") +
  tm_layout(scale = 0.7)

Gimap <- tm_shape(nga_wp.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "Local Gi") + 
  tm_borders(alpha = 0.5) +
  tm_layout(scale = 0.7)

tmap_arrange(nfwpc, Gimap, asp=1, ncol=2)
```

In the Gi map above, LGAs shaded in red are the hot spot areas and LGAs shaded in blue are the cold spot areas. The darkness of the colours representing the intensity of the Gi values.

The code below creates an interactive Gi map which would then tell us exactly which are the hot spot and cold spot areas.

```{r}
tmap_mode("view")

tm_shape(nga_wp.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "Local Gi") + 
  tm_borders(alpha = 0.5) +
  tm_layout(title= "Gi Map of Non-functional Water Points") +
  tm_scale_bar()

tmap_mode("plot")
```

After zooming in, some of the hot spot LGAs are `Ilorin South`, `Kaduna North` and `Kaduna South` while some of the cold spot LGAs are `Kala/Balge`, `Kukawa` and `Marte`.

[**List of hot spot LGAs by rank**]{.underline}

```{r}
hotspot_rank <- nga_wp.gi %>%
  select(ADM2_EN, gstat_adaptive) %>%
  filter(gstat_adaptive > 4) %>%
  arrange(desc(gstat_adaptive))

hotspot_rank <- hotspot_rank %>%
  mutate(rank = 1:nrow(hotspot_rank)) %>%
  select(rank, ADM2_EN, gstat_adaptive)
```

```{r}
DT::datatable(hotspot_rank,
              rownames = FALSE,
              colnames = c('Rank' = 'rank',
                           'LGAs' = 'ADM2_EN',
                           'Local Gi' = 'gstat_adaptive'), 
              filter = 'top',
              class = 'display')
```

As seen above, there are 15 hot spot LGAs with `Ilorin South` being the highest ranked LGA in Nigeria.

[**List of cold spot LGAs by rank**]{.underline}

```{r}
coldspot_rank <- nga_wp.gi %>%
  select(ADM2_EN, gstat_adaptive) %>%
  filter(gstat_adaptive < -2) %>%
  arrange(gstat_adaptive)

coldspot_rank <- coldspot_rank %>%
  mutate(rank = 1:nrow(coldspot_rank)) %>%
  select(rank, ADM2_EN, gstat_adaptive)
```

```{r}
DT::datatable(coldspot_rank,
              rownames = FALSE,
              colnames = c('Rank' = 'rank',
                           'LGAs' = 'ADM2_EN',
                           'Local Gi' = 'gstat_adaptive'), 
              filter = 'top',
              class = 'display')
```

As seen above, there are 136 cold spot LGAs with `Kala/Balge` being the highest ranked LGA in Nigeria.
