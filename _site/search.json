[
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. We can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nPerforming outliers/clusters analysis by using appropriate local measures of spatial association methods.\nPerforming hotspot areas analysis by using appropriate local measures of spatial association methods.\n\n\n\n\nPlot maps to show the spatial distribution of functional and non-functional water point rate at Local Government Area (LGA) level by using appropriate thematic mapping technique provided by tmap package.\n\n\n\n\n\nPlot hotspot areas and outliers/clusters maps of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#overview",
    "href": "Take-home_Ex/Take-home_Ex1.html#overview",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Overview",
    "text": "Overview\nGeospatial analytics hold tremendous potential to address complex problems faced by society. In this study, we are tasked to apply appropriate global and local measures of spatial association techniques to reveals the spatial patterns of non-functional water points. For the purpose of this study, Nigeria will be used as the study country."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#installing-loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex1.html#installing-loading-r-packages",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Installing & Loading R Packages",
    "text": "Installing & Loading R Packages\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf\ntidyverse\ntmap\nspdep\nfunModeling, to be used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#getting-the-data-into-r-environment",
    "href": "Take-home_Ex/Take-home_Ex1.html#getting-the-data-into-r-environment",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\n\nImport Aspatial Data\nFor the purpose of this exercise, data of WPdx+ version from WPdx Global Data Repositories will be used.\nThe code chunk below imports Water_Point_Data_Exchange_-_Plus__WPdx__.csv from the rawdata folder into R by using read_csv() of readr package and save it as tibble data frame called wpdx.\n\nwpdx <- read_csv(\"rawdata/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv\")\n\n\n\nImport Geospatial Data\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries.\nThe code chunk below uses st_read() of sf package to import nga_polnda_adm2_1m_salb shapefile into R environement. The imported shapefile will be a simple features object of sf.\n\nnga <- st_read(dsn = \"data/geospatial\",\n                 layer = \"nga_polbndl_adm2_1m_salb\")\n\n\nnga2 <- st_read(dsn = \"data/geospatial\",\n                 layer = \"nga_polnda_adm2_1m_salb\")\n\n\n\nPerforming relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 data frame. This is performed by using left_join() of dplyr package.\nTBC"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#data-wranging",
    "href": "Take-home_Ex/Take-home_Ex1.html#data-wranging",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Data Wranging",
    "text": "Data Wranging\nWe will filter the wpdx data to be for Nigeria only and aggregate the water point count at LGA level.\n\nnigeria_wp <- wpdx %>%\n  filter(`#country_name` == 'Nigeria') %>%\n  group_by(`#country_name`, `#adm2`) %>%\n    summarise(count = n()) %>%\n  rename(country = `#country_name`) %>%\n  rename(adm2 = `#adm2`)\n\nData frames nigeria_wp is saved in RDS format to avoid uploading large files to Git.\n\nsaveRDS(nigeria_wp, 'data/rds/nigeria_wp.rds')\n\n\nnigeria_wp <- readRDS('data/rds/nigeria_wp.rds')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my leaning journey of geospatial analytics."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In this in-class exercise, I will learn to compute spatial weights using R."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#installing-loading-r-packages",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#installing-loading-r-packages",
    "title": "In-class Exercise 1",
    "section": "Installing & Loading R Packages",
    "text": "Installing & Loading R Packages\nThe code chunk below installs and loads tidyverse and sf packages into R environment.\n\npacman::p_load(sf, tidyverse, spdep, tmap)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#import-geospatial-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#import-geospatial-data",
    "title": "In-class Exercise 1",
    "section": "Import Geospatial Data",
    "text": "Import Geospatial Data\n\nThe Data\nTwo data set below will be used:\n\nHunan county boundary layer - a geospatial data set in ESRI shapefile format.\nHunan_2012.csv - a csv file containing selected Hunan’s local development indicators in 2012.\n\n\n\nImport shapefile\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R environement. The imported shapefile will be a simple features object of sf.\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Jacobche\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport attribute data in csv\nThe code chunk below uses read_csv() of readr package to import Hunan_2012.csv into R environment.\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 data frame. This is performed by using left_join() of dplyr package.\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualising-regional-development-indicator",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualising-regional-development-indicator",
    "title": "In-class Exercise 1",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "title": "In-class Exercise 1",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nIn this section, we will learn to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. From the documentation we will see that we can pass a “queen” argument that takes TRUE or FALSE as options where the default is set to TRUE, which will return a list of first order neighbours using the Queen criteria.\n\nComputing (QUEEN) contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbour.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThis means that Polygon 1 has 5 neighbors. The numbers represent the Polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk below will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nAn alternative code chunk is as such:\n\nhunan$NAME_3[wm_q[[1]]]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nWe can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nComputing (ROOK) contiguity based neighbours\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbour.\n\n\nVisualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typical method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs.\n\nGetting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package.\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind() to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\nPlotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "title": "In-class Exercise 1",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\nIn this section, we will learn to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nFrom the print, Average number of links = 3.681818 means that on average, each region point area is nearest in distance to another 3.68 region point areas.\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nWe use n.comp.nb() function of spdep package to find the number of disjoint connected subgraphs in the wm_d62 weight matrix (whether all the points are connected in one network or is there another network in the same map).\n\nnc value - number of disjoint connected networks of neighbours\ncomp.id - vector with indices of the disjoint connected networks of neighbours\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nWe can see that all the counties return 1 for their nc value, meaning there’s only 1 connected network.\n\nPlotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no more no less.\n\nPlotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#weights-based-on-idw",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#weights-based-on-idw",
    "title": "In-class Exercise 1",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\nIn this section, we will learn to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep package.\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we will stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon (polygon ID=1)’s four neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nTo see the row standardised inversed distance weight of the first polygon (polygon ID 1)’s four neighbours:\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, we will learn to create four different spatial lagged variables:\n\nspatial lag with row-standardized weights\nspatial lag as a sum of neighbouring values\nspatial window average\nspatial window sum\n\nSpatially lagged variable\nWith a neighbor structure defined by the non-zero elements of the spatial weights matrix W, a spatially lagged variable is a weighted sum or a weighted average of the neighbouring values for that variable.\n\nSpatial lag with row-standardized weights\nWe will compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw() function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply() function, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw() to compute a lag variable from our weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nFirst, let us examine the result by using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights. To begin we assign k6 to a new variable because we will directly alter its structure to add the diagonal elements.\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNow we obtain weights with nb2listw().\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\nSpatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advisable to use the core tmap mapping functions."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html",
    "href": "In-class_Ex/In-class_Ex2.html",
    "title": "In-class_Exercise 2",
    "section": "",
    "text": "In this exercise, we are to find out if functionally similar water points positively co-occur in Nigeria."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#getting-started",
    "href": "In-class_Ex/In-class_Ex2.html#getting-started",
    "title": "In-class_Exercise 2",
    "section": "Getting Started",
    "text": "Getting Started\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf\ntidyverse\ntmap\nspdep\nfunModeling, to be used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#import-data",
    "href": "In-class_Ex/In-class_Ex2.html#import-data",
    "title": "In-class_Exercise 2",
    "section": "Import Data",
    "text": "Import Data\nchange file name\n\ngeo_export (from the 4 shapefile data)\nnga_admbnda_adm2_osgof_20190417\n\n\nImport water point geospatial data\nThe code chunk below uses…\n\n# eval: false\nwp <- st_read(dsn = \"rawdata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nReading layer `geo_export' from data source \n  `C:\\Jacobche\\ISSS624\\In-class_Ex\\rawdata' using driver `ESRI Shapefile'\nSimple feature collection with 406566 features and 72 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -92.05073 ymin: -27.31495 xmax: 92.32694 ymax: 26.65622\nGeodetic CRS:  WGS 84\n\n\nThe code chunk below uses write_rds() of readr package…\n\n# eval: false\nwp_nga <- write_rds(wp,\n                    \"rawdata/wp_nga.rds\")\n\nwpt_functional is a simple feature data table since wp_nga is a simple feature data table\nremember to create the proportion! just divide the total will do."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex2.html#importing-geospatial-data",
    "title": "In-class_Exercise 2",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nIn this in-class exercise, two geospatial data sets will be used:\n\ngeo_export\nnga_admbnda_adm2_osgof_20190417\n\n\nImporting water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\n# eval: false\nwp <- st_read(dsn = \"rawdata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nReading layer `geo_export' from data source \n  `C:\\Jacobche\\ISSS624\\In-class_Ex\\rawdata' using driver `ESRI Shapefile'\nSimple feature collection with 406566 features and 72 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -92.05073 ymin: -27.31495 xmax: 92.32694 ymax: 26.65622\nGeodetic CRS:  WGS 84\n\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria only.\n\nNote: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e wgs84).\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in rawdata sub-folder, which will not be uploaded to Git.\n\n# eval: false\nwp_nga <- write_rds(wp,\n                    \"rawdata/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA boundary data\nNow, we are going to import the Local Government Area (LGA) boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"data\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\Jacobche\\ISSS624\\In-class_Ex\\data' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_admbnda_adm2_osgof_20190417 shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#data-wrangling",
    "href": "In-class_Ex/In-class_Ex2.html#data-wrangling",
    "title": "In-class_Exercise 2",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"rawdata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\nExploratory Data Analysis\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#extracting-water-point-data",
    "href": "In-class_Ex/In-class_Ex2.html#extracting-water-point-data",
    "title": "In-class_Exercise 2",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\nExtracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\n\nExploratory Data Analysis (functional)\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wpt_functional.\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n\n                   status_cle frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\n\n\nExtracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\n\nExploratory Data Analysis (non-functional)\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wpt_nonfunctional.\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n\n\n\n\nExtracting water point with Unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#performing-point-in-polygon-count",
    "href": "In-class_Ex/In-class_Ex2.html#performing-point-in-polygon-count",
    "title": "In-class_Exercise 2",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\nThe code chunk below performs two operations at one go. Firstly, identify water points located inside each LGA by using st_intersects(). Next, length() of Base R is used to calculate numbers of water points that fall inside each LGA.\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#saving-the-analytical-data-table",
    "href": "In-class_Ex/In-class_Ex2.html#saving-the-analytical-data-table",
    "title": "In-class_Exercise 2",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\nThe code chunk below computes the proportion of functional and non-functional water point at LGA level.\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\nto keep the file size small, select() of dplyr is used to retain only fields 3, 4, 9, 10, 18, 19, 20, 21, 22 and 23.\n\nNow, we have the tidy sf data table for subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"data/nga_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#visualising-the-spatial-dsitribution-of-water-points",
    "href": "In-class_Ex/In-class_Ex2.html#visualising-the-spatial-dsitribution-of-water-points",
    "title": "In-class_Exercise 2",
    "section": "Visualising the spatial dsitribution of water points",
    "text": "Visualising the spatial dsitribution of water points\n\nnga_wp <- read_rds(\"data/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2.html#visualising-the-spatial-distribution-of-water-points",
    "href": "In-class_Ex/In-class_Ex2.html#visualising-the-spatial-distribution-of-water-points",
    "title": "In-class_Exercise 2",
    "section": "Visualising the spatial distribution of water points",
    "text": "Visualising the spatial distribution of water points\nThe code below uses qtm() of tmap package to plot side-by-side choropleth maps showing various water points distribution by LGA levels in Nigeria.\n\nnga_wp <- read_rds(\"data/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\") +\n  tm_layout(scale = 0.7)\nwp_functional <- qtm(nga_wp, \"wpt functional\")+\n  tm_layout(scale = 0.7)\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")+\n  tm_layout(scale = 0.6)\nunknown <- qtm(nga_wp, \"wpt unknown\")+\n  tm_layout(scale = 0.7)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, nrow=2, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#importing-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex1.html#importing-geospatial-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nTwo geospatial data sets used are:\n\ngeo_export\nnga_admbnda_adm2_osgof_20190417\n\n\nImporting water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n(Since we have previously used this data set in the in-class exercise, we will use the data directly from there.)\n\nwp <- st_read(dsn = \"C:/Jacobche/ISSS624/In-class_Ex/rawdata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria only.\n\nNote: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e wgs84).\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in rawdata sub-folder, which will not be uploaded to Git.\n\nwp_nga <- write_rds(wp,\n                    \"C:/Jacobche/ISSS624/In-class_Ex/rawdata/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA boundary data\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"C:/Jacobche/ISSS624/In-class_Ex/data\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\Jacobche\\ISSS624\\In-class_Ex\\data' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_admbnda_adm2_osgof_20190417 shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"C:/Jacobche/ISSS624/In-class_Ex/rawdata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\nExploratory Data Analysis\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#extracting-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex1.html#extracting-water-point-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\nExtracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\n\nExploratory Data Analysis (functional)\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wpt_functional.\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n\n                   status_cle frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\n\n\nExtracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\n\nExploratory Data Analysis (non-functional)\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wpt_nonfunctional.\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n\n\n\n\nExtracting water point with Unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex/Take-home_Ex1.html#performing-point-in-polygon-count",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\nThe code chunk below performs two operations at one go. Firstly, identify water points located inside each LGA by using st_intersects(). Next, length() of Base R is used to calculate numbers of water points that fall inside each LGA.\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#saving-the-analytical-data-table",
    "href": "Take-home_Ex/Take-home_Ex1.html#saving-the-analytical-data-table",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\nThe code chunk below computes the proportion of functional and non-functional water point at LGA level.\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\nto keep the file size small, select() of dplyr is used to retain only fields 3, 4, 9, 10, 18, 19, 20, 21, 22 and 23.\n\nNow, we have the tidy sf data table for subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"C:/Jacobche/ISSS624/In-class_Ex/data/nga_wp.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "href": "Take-home_Ex/Take-home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Visualising the spatial distribution of water points",
    "text": "Visualising the spatial distribution of water points\nThe code below uses qtm() of tmap package to plot side-by-side choropleth maps showing the spatial water points distribution by LGA levels in Nigeria.\n\nnga_wp <- read_rds(\"C:/Jacobche/ISSS624/In-class_Ex/data/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\") +\n  tm_layout(scale = 0.7)\nwp_functional <- qtm(nga_wp, \"wpt functional\")+\n  tm_layout(scale = 0.7)\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")+\n  tm_layout(scale = 0.6)\nunknown <- qtm(nga_wp, \"wpt unknown\")+\n  tm_layout(scale = 0.7)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, nrow=2, ncol=2)\n\n\n\n\nNext we will create an interactive choropleth map for non-functional water points which would allow us to zoom in for a closer look.\n\ntmap_mode(\"view\")\n\ntm_shape(nga_wp) + \n  tm_polygons(\"wpt non-functional\", \n              breaks = c(0, 71, 141, 211, 280),\n              palette = \"Reds\") +\n  tm_layout(title= \"Spatial Distribution of Non-functional Water Points\") +\n  tm_scale_bar()\n\n\n\n\n\ntmap_mode(\"plot\")\n\nFrom the map, we can see that the distribution of non-functional water points is not even with LGAs like Ifelodun and Igabi having a higher concentration than others. Nevertheless, there seem to be areas where they are clustered - i.e. around the Central and Western region of Nigeria."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, we will learn to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end of this exercise, we will be able to:\n\nimport geospatial data using appropriate function(s) of sf package\nimport csv file using appropriate function of readr package\nperform relational join using appropriate join function of dplyr package\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package\n\nplot Moran scatterplot\ncompute and plot spatial correlogram using appropriate function of spdep package\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package\nvisualise the analysis output by using tmap package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\nThe analytical question\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study is to apply appropriate spatial statistical methods to discover if development are evenly distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Province, People Republic of China.\n\n\nThe Study Area and Data\nTwo data sets will be used in this hands-on exercise:\n\nHunan province administrative boundary layer at county level - a geospatial data set in ESRI shapefile format.\nHunan_2012.csv - a csv file containing selected Hunan’s local development indicators in 2012.\n\n\n\nSetting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in R.\n\nsf is use for importing and handling geospatial data in R\ntidyverse is mainly use for wrangling attribute data in R\nspdep is used to compute spatial weights, global and local spatial autocorrelation statistics\ntmap is used to prepare cartographic quality choropleth map\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages\nchecking if the R packages in the package list have been installed in R\n\nif they have yet to be installed, RStudio will install the missing packages\n\nlaunching the packages into R environment\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\nIn this section, we will learn to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be a simple features object of sf.\n(Since we have previously used this data set in the in-class exercise, we will use the data directly from there.)\n\nhunan <- st_read(dsn = \"C:/Jacobche/ISSS624/In-class_Ex/In-class_Ex1/data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Jacobche\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into R environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 <- read_csv(\"C:/Jacobche/ISSS624/In-class_Ex/In-class_Ex1/data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below is used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\nVisualising Regional Development Indicator\nThe code chunk below uses tm_shape() of tmap package to plot two choropleth maps showing the distribution of GDPPC 2012 but using different data classification methods.\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\nFrom the maps above, we can see that data classification methods do matter. When using Equal Quantile Classification, those areas having lesser distribution as seen in Equal Interval Classification may non be that significant anymore."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nIn this section, we will learn to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights will be used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nThe code chunk below uses poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. From the documentation we will see that we can pass a “queen” argument that takes TRUE or FALSE as options where the default is set to TRUE, which will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbour.\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nIn this section, we will learn to perform Moran’s I statistics testing by using moran.test() of spdep.\n\nMaron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nFrom the Moran’s I test since the p-value = 1.095e-06, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of GDPPC values in the counties are not randomly distributed. As the Moran I statistic = 0.300749970 > 0, we can infer that the spatial pattern is “clustered”.\n\n\nComputing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the Monte Carlo simulation since the p-value = 0.001, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of GDPPC values in the counties are not randomly distributed. As the Moran I statistic = 0.30075 > 0, we can infer that the spatial pattern is “clustered”.\n\n\nVisualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below, where hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nFrom the result, we can see a positive autocorrelation as Moran’s I statistic (0.300749970) is on the right side of the distribution in simulated Moran’s I.\nThe code chunk below uses ggplot2 to visualise the data.\n\nggplot(data = as.data.frame(bperm$res), aes(x = bperm$res)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Is there a positive autocorrelation?\",\n      x = \"Simulated Moran's \",\n      y = \"Frequency\") +\n  geom_vline(data = as.data.frame(bperm$res), aes(xintercept=0), color=\"red\", size=1, linetype=\"longdash\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nGlobal Spatial Autocorrelation: Geary’s\nIn this section, we will learn to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\nGeary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nFrom the Geary’s C test since the p-value = 0.0001526, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of GDPPC values in the counties are not randomly distributed. As the Geary C statistic = 0.6907223 < 1, we can infer that the spatial pattern is “clustered”.\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the Monte Carlo simulation since the p-value = 0.001, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of GDPPC values in the counties are not randomly distributed. As the Geary C statistic = 0.69072 < 1, we can infer that the spatial pattern is “clustered”.\n\n\nVisualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nFrom the result, we can see a negative autocorrelation as Geary’s C statistic (0.690722) is on the left side of the distribution in simulated Geary’s C."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in our data or model residuals. They show how correlated are pairs of spatial observations when we increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\nCompute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide the complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFrom the result, we can infer that lag 1 and lag 2 having a positive autocorrelation while lag 5 and lag 6 having a negative autocorrelation.\n\n\nCompute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association (LISA) are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, we will learn to apply appropriate LISA, especially the local Moran’s I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\nComputing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local Moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local Moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local Moran statistic\nPr(): the p-value of local Moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran's Statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as considered above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"Local Moran's Statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split into 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. These are the high-high locations.\n\n\nPlotting Moran scatterplot with standardised variable\nFirstly, we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into our dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below shows the steps to prepare a LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, we derive the spatially lagged variable of interest (i.e. GDPPC) and center the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)\n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I <- localMI[,1] - mean(localMI[,1])\n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05\n\nThese four command lines define the high-high, low-low, low-high and high-low categories.\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3\nquadrant[DV >0 & LM_I>0] <- 4\n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]>signif] <- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\n# eval: false\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot the choropleth map showing the GDPPC distribution and the LISA map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)\n\n\n\n\nWe can see from the LISA map that there’s a high-high cluster indicating positive autocorrelation for the subzone/county areas having adjacent high GDPPC values. There is also a low-high cluster indicating negative autocorrelation/outliers whereby those areas with low GDPPC values are surrounded by high GDPPC areas."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can also be used to detect hot spot and/or cold spot areas. The term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics. It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nFirstly, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix:\n\nfixed distance weight matrix\nadaptive distance weight matrix\n\n\nDeriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl() variation of map from the purrr package. For more information, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind() to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"Local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nIn the choropleth map above with Local Gi, counties shaded in red are the hot spot areas and counties shaded in blue are the cold spot areas. The darkness of the colours representing the intensity of the Gi values.\nThere is a clear sign of East-West divide in the GDP per capita by county of Hunan province in 2012. The hot spot areas were centered around Changsha city at the East of the province. The cold spot areas, on the other hand, mainly comprise of counties located on the Western part of the province centre around the forested Shaoyang prefecture city.\n\n\nGi statistics using adaptive distance\nThe code chunk below is used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using adaptive distance weight matrix.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"Local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nIn the Gi map above, counties shaded in red are the hot spot areas and counties shaded in blue are the cold spot areas. The darkness of the colours representing the intensity of the Gi values. The adaptive distance method still shows us a clear sign of East-West divide in the GDP per capita by county of Hunan province in 2012, even though neighbouring distance weights may be considered to be more balanced in this case."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex1.html#the-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "The Data",
    "text": "The Data\n\nAspatial data\nFor the purpose of this exercise, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. We are required to use WPdx+ data set.\n\n\nGeospatial data\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I will learn to handle geospatial data in R by using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#installing-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#installing-launching-r-packages",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Installing & Launching R Packages",
    "text": "Installing & Launching R Packages\nThe code chunk below installs and loads sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#import-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#import-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Import Geospatial Data",
    "text": "Import Geospatial Data\n\nImport polygon feature data in shapefile format\nThe code chunk below imports the following geospatial data into R by using st_read() of sf package and save it as a polygon feature data frame called mpsz.\n\nmpsz = st_read(dsn = \"data/geospatial\", \n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Jacobche\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe message reveals that there are a total of 323 multipolygon features and 15 fields in mpsz which is in svy21 projected coordinates system.\n\n\nImport polyline feature data in shapefile format\nThe code chunk below imports the following geospatial data into R by using st_read() of sf package and save it as a line feature data frame called cyclingpath.\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                      layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\Jacobche\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe message reveals that there are a total of 1625 features and 2 fields in cyclingpath which is in svy21 projected coordinates system.\n\n\nImport GIS data in kml format\nThe code chunk below imports the following geospatial data into R by using st_read() of sf package and save it as a point feature data frame called preschool.\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Jacobche\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe message reveals that there are a total of 1359 features and 2 fields in preschool which is in wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#checking-data-content",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#checking-data-content",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Checking Data Content",
    "text": "Checking Data Content\nThe code chunk below displays the basic information of the feature class by using st_geometry() of sf package.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nThe code chunk below displays the associated attribute information in the data frame by using glimpse() of dplyr package.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThe code chunk below reveals the complete information of a feature object by using head() of Base R.\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\nWe will first visualize some of the geospatial features using plot() of the R Graphics Package.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above.\nWe can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute like PLN_AREA_N, as shown in the code chunk below.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\nNote that plot() is meant for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Working with Projection",
    "text": "Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, we will learn how to project a simple feature data frame from one coordinate system to another coordinate system, and this process is known as projection transformation.\n\nAssigning EPSG code to a simple feature data frame\nOne of the common issues that may happen when importing geospatial data into R is that the coordinate system of the source data is either missing (such as missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThe code chunk below uses st_crs() of sf package on the coordinate system of mpsz simple feature data frame.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nWe will now verify that the EPSG code for mpsz3414 has been corrected to 3414 by using the code chunk below.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming the projection of preschool from wgs84 to svy21\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis needs to use distance or/and area measurements.\nPreviously, we found out that the preschool simple feature data frame is in wgs84 coordinates system. However, st_set_crs() is not appropriate to be used here because we need to reproject preschool from one coordinate system to another coordinate system mathemetically. As such, st_transform() of sf package should be used instead and the projection transformation is performed by using the code chunk below.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n\n\nst_geometry(preschool3414)\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)\n\n\nWe have verified that the preschool3414 is in svy21 projected coordinate system now."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nIn practice, it is not unusual that we come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. Different from geospatial data, aspacial data consists of two fields that capture the x- and y-coordinates of the data points.\nIn this section, we will learn about how to import an aspatial data into R environment and save it as a tibble data frame. Next, we will convert it into a simple feature data frame. For the purpose of this exercise, the listings.csv data downloaded from Airbnb will be used.\n\nImporting the aspatial data\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nTo examine if the data file has been imported correctly, we can use list() of Base R by using the code chunk below.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nThe output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields detected are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\nCreating a simple feature data frame from aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf package.\n\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs=4326) %>%\n  st_transform(crs = 3414)\n\nThings to learn from the arguments in the code chunk above:\n\ncoords argument requires us to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires us to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System while EPSG: 3414 is Singapore svy21 Projected Coordinate System. We can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nNotice that a new column called geometry has been added into the listing_sf data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, we will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\nBuffering\nScenario\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. We are being tasked to determine the extend of the land need to be acquired and their total area.\nSolution\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist=5, nQuadSegs = 30)\n\nNext, the area of the buffers is calculated using st_area() of sf package.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in-polygon count\nScenario\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nSolution\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each Planning Subzone.\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nWe can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nTo list the Planning Subzone with the most number of pre-schools, the top_n() of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nFrom the output, WOODLANDS EAST is the Planning Subzone with the most number of pre-schools.\nTo calculate the density of pre-schools by Planning Subzone\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nTo list the Planning Subzone with the greatest density of pre-schools, the top_n() of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, `PreSch Density`)\n\nSimple feature collection with 1 feature and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28896.26 ymin: 28339.16 xmax: 29426.66 ymax: 28685.25\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C\n1       22         10     ANSON    DTSZ10      Y DOWNTOWN CORE         DT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 4893F02202845C1D 2014-12-05 29145.35 28466.78\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1     1586.1   103238.5 MULTIPOLYGON (((29201.07 28...            3\n            Area   PreSch Density\n1 103238.5 [m^2] 29.05893 [1/m^2]\n\n\nFrom the output, ANSON is the Planning Subzone with the greatest density of pre-schools."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#explorotary-data-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#explorotary-data-analysis",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Explorotary Data Analysis",
    "text": "Explorotary Data Analysis\nIn practice, many geospatial analytics start with Exploratory Data Analysis (EDA). In this section, we will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\nFirstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nAlthough the syntax is very easy to use, however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate ggplot2 functions will be used.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle= \"Right-tailed distribution \\nThere are many planning subzones with a single pre-school\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nThe code chunk below uses ggplot2 method to plot a scatterplot, showing the relationship between Pre-school Density and Pre-school Count.\n\nggplot(data=mpsz3414, aes(x= as.numeric(`PreSch Density`), y=`PreSch Count`)) + \n    geom_point() +\n  labs(title = \"Are Pre-school Density and Pre-school Count positively correlated ?\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\") +\n  xlim(0, 40) +\n  ylim(0, 40)\n\n\n\n\nFrom the output, it does seem that Pre-school Density and Pre-school Count are positively correlated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units (such as countries, provinces, states, counties or census units) using area patterns or graduated colors.\nIn this hands-on exercise, I will learn to plot functional and truthful choropleth maps by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#installing-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#installing-launching-r-packages",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Installing & Launching R Packages",
    "text": "Installing & Launching R Packages\nBeside tmap package, four other R packages will be used:\n\nreadr for importing delimited text file\ntidyr for tidying data\ndplyr for wrangling data\nsf for handling geospatial data\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below installs and loads these packages into R environment.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#importing-data-into-r",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Importing Data into R",
    "text": "Importing Data into R\n\nThe Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the Planning Subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file. It can be downloaded at Department of Statistics, Singapore. Although it does not contain any coordinates values, but its PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\nImporting Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Jacobche\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nImporting Attribute Data into R\nThe code chunk below uses read_csv() function of readr package to import the attribute data into RStudio and save the file into an R data frame called popagsex.\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Preparation\nBefore a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nData wrangling\nThe code chunk below uses pivot_wider() of tidyr package as well as mutate(), filter(), group_by() and select() of dplyr package for data wrangling and transformation.\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required. That is to convert the values in PA and SZ fields to uppercase in popdata2020 since they are in upper- and lowercase originally. Whereas, the values in SUBZONE_N and PLN_AREA_N from mpsz are all in uppercase.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nThe code chunk below uses left_join() of dplyr to join the geographical data and attribute table with SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nNote that left_join() of dplyr package is used with mpsz simple feature data frame as the left data table, which is to ensure that the output will be a simple feature data frame.\nmpsz_pop2020 is being written as a rds file using the code chunk below.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Choropleth Mapping Geospatial Data Using tmap",
    "text": "Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap:\n\nPlotting a thematic map quickly by using qtm()\nPlotting a highly customisable thematic map by using tmap elements\n\n\nPlotting a choropleth map quickly by using qtm()\nThe code chunk below uses qtm() to draw a cartographic standard choropleth map, which serves as a good default visualisation.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nThings to lnote:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\nCreating a choropleth map by using tmap elements\nDespite its usefulness in drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control.\nTo draw a high quality cartographic choropleth map, tmap drawing elements should be used as below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency Ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by Planning Subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2, position = c(\"left\", \"top\")) +\n  tm_scale_bar(position = c(\"right\", \"top\")) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-section, we will look at some of the tmap functions that are used to plot these elements.\n\nDrawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elements such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in later sub-section on Data classification methods of tmap.\nThe default colour scheme used is YlOrRd of ColorBrewer. We will learn more about this in later sub-section on Colour Scheme.\nBy default, Missing value will be shaded in grey.\n\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\nActually, tm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme while tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nNotice that the planning subzones are shaded according to the respective dependency values.\nTo add the boundary of the planning subzones, tm_borders() will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders():\n\ncol = border colour\nlwd = border line width where the default is 1\nlty = border line type where the default is “solid”\n\n\n\n\nData classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes. tmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunk below uses an equal data classification method.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed than equal data classification method.\nThe code chunk below uses a sd data classification method.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunks below use the same sd data classification method but different numbers of classes (i.e. 2, 10).\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe map output shows that by assigning different numbers of classes, the colour distribution of the map can be largely affected.\n\n\nPlotting choropleth map with custom break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that in tmap, the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below is used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00).\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\nColour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\nUsing ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe code chunk below shades the choropleth map in green, and a “-” prefix is added to reverse the colour shading.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Layouts\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, the margins and the aspects ratios. Colour settings and data classification methods covered in the previous section related to the palette and break-points are used to affect how the map looks.\n\nMap Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by Planning Subzone \\n(Jenks Classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap style\nmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style being used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic Furniture\nBeside map style, tmap also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of Persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets()\nby creating multiple stand-alone maps with tmap_arrange()\n\n\nBy assigning multiple values to at least one of the aesthetic arguments\nThe code chunk below creates small multiple choropleth maps by defining ncols in tm_fill().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nThe code chunk below creates small multiple choropleth maps by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\nThe code chunk below creates small multiple choropleth maps by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\nThe code chunk below creates small multiple choropleth maps by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, we can also use selection function to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#global-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex1.html#global-spatial-autocorrelation",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nIn order to confirm our observation of signs of spatial clustering, we will make use of global autocorrection technique. We will compute the global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. LGA) in the study area.\nThe code chunk below uses poly2nb() of spdep package to compute the Queen contiguity weight matrix for Nigeria.\n\nwm_q <- poly2nb(nga_wp, \n                queen=TRUE)\n\nset.ZeroPolicyOption(TRUE)\n\n[1] FALSE\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nThe summary report above shows that there are 774 LGAs in Nigeria. The most connected LGA has 14 neighbours. There are two LGAs with only one neighbours.\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”).\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\n\nMaron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(nga_wp$`wpt non-functional`,\n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt non-functional`  \nweights: rswm_q  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 20.043, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.433932927      -0.001295337       0.000471516 \n\n\nFrom the Moran’s I test since the p-value < 2.2e-16 which is approximately 0, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of non-functional water points in the LGAs are not randomly distributed. As the Moran I statistic = 0.433932927 > 0, we can infer that there is sign of “clustered” spatial pattern.\n\n\nComputing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(nga_wp$`wpt non-functional`,\n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43393, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the Monte Carlo simulation since the p-value = 0.001, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of non-functional water points in the LGAs are not randomly distributed. As the Moran I statistic = 0.43393 > 0, we can infer that there is sign of “clustered” spatial pattern.\n\n\n\nGlobal Spatial Autocorrelation: Geary’s\n\nGeary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(nga_wp$`wpt non-functional`, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q \n\nGeary C statistic standard deviate = 14.457, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.6170907765      1.0000000000      0.0007014859 \n\n\nFrom the Geary’s C test since the p-value < 2.2e-16 which is approximately 0, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of non-functional water points in the LGAs are not randomly distributed. As the Geary C statistic = 0.6170907765 < 1, we can again infer that there is sign of “clustered” spatial pattern.\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(nga_wp$`wpt non-functional`, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.61709, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the Monte Carlo simulation since the p-value = 0.001, we can reject the null hypothesis at 99% confidence interval and can conclude that the distribution of non-functional water points in the LGAs are not randomly distributed. As the Geary C statistic = 0.61709 < 1, we can again infer that there is sign of “clustered” spatial pattern."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association (LISA) are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. We will apply appropriate LISA, especially the local Moran’s I to detect cluster and/or outlier from non-functional water points of Nigeria.\n\nComputing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values. The code chunks below are used to compute local Moran’s I of non-functional water points at the LGA level.\n\nfips <- order(nga_wp$ADM2_EN)\nlocalMI <- localmoran(nga_wp$`wpt non-functional`, rswm_q)\nhead(localMI)\n\n           Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.32365786 -9.995243e-04 1.924638e-01 -0.73547576     0.46204980\n2  0.07000542 -4.092463e-05 1.053077e-02  0.68258288     0.49487045\n3  1.25819985 -1.627684e-03 4.181728e-01  1.94819847     0.05139122\n4 -0.03537489 -5.427505e-05 5.954304e-03 -0.45773361     0.64714384\n5  0.01201533 -2.590965e-04 3.988998e-02  0.06145673     0.95099547\n6  0.00768085 -1.538445e-07 1.687859e-05  1.86960486     0.06153871\n\n\nThe code chunk below lists the content of the local Moran matrix derived by using printCoefmat(). Additionally, paste() of base R is used since ADM2_EN contains duplicated name but from different ADM2_PCODE.\n\nprintCoefmat(data.frame(localMI[fips,], \n                        row.names= paste(nga_wp$ADM2_PCODE,nga_wp$ADM2_EN)[fips]), \n             check.names=FALSE)\n\n                                     Ii        E.Ii      Var.Ii        Z.Ii\nNG001001 Aba North          -3.2366e-01 -9.9952e-04  1.9246e-01 -7.3548e-01\nNG001002 Aba South           7.0005e-02 -4.0925e-05  1.0531e-02  6.8258e-01\nNG008001 Abadam              1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00\nNG015001 Abaji              -3.5375e-02 -5.4275e-05  5.9543e-03 -4.5773e-01\nNG003001 Abak                1.2015e-02 -2.5910e-04  3.9890e-02  6.1457e-02\nNG011001 Abakaliki           7.6808e-03 -1.5384e-07  1.6879e-05  1.8696e+00\nNG028001 Abeokuta North      2.3716e-01 -6.6542e-04  8.5226e-02  8.1464e-01\nNG028002 Abeokuta South      1.3499e-01 -6.9507e-05  1.3396e-02  1.1669e+00\nNG009001 Abi                 5.8469e-01 -3.9167e-04  6.0293e-02  2.3828e+00\nNG017001 Aboh-Mbaise         1.9145e-01 -2.2881e-04  2.5098e-02  1.2099e+00\nNG033001 Abua/Odual          6.7485e-01 -7.6926e-04  8.4332e-02  2.3265e+00\nNG015002 Abuja Municipal     1.3484e-01 -9.2780e-04  8.8869e-02  4.5543e-01\nNG023001 Adavi               1.6286e-02 -4.0925e-05  6.3021e-03  2.0567e-01\nNG007001 Ado                -3.1655e-02 -2.9456e-05  2.8239e-03 -5.9514e-01\nNG028003 Ado-Odo/Ota        -3.1637e-01 -1.0254e-02  1.1135e+00 -2.9010e-01\nNG013001 Ado Ekiti           6.8612e-02 -9.2780e-04  1.4275e-01  1.8406e-01\nNG031001 Afijio              2.4270e-02 -1.9868e-05  5.1126e-03  3.3971e-01\nNG011002 Afikpo North        5.8712e-01 -1.1792e-03  1.8138e-01  1.3814e+00\nNG011003 Afikpo South       -8.6368e-03 -8.6620e-05  1.1101e-02 -8.1152e-02\nNG027001 Agaie              -2.1125e-02 -1.8249e-05  2.8103e-03 -3.9815e-01\nNG007002 Agatu              -6.1300e-02 -1.4475e-04  2.2288e-02 -4.0963e-01\nNG025001 Agege               2.8968e-01 -1.3297e-03  3.4172e-01  4.9782e-01\nNG004001 Aguata              8.3857e-01 -1.1920e-03  1.8334e-01  1.9612e+00\nNG027002 Agwara              1.5893e-03 -2.7477e-05  5.2960e-03  2.2217e-02\nNG017002 Ahiazu-Mbaise       1.3175e-01 -8.6620e-05  9.5025e-03  1.3525e+00\nNG033002 Ahoada East         8.0063e-01 -9.3914e-04  1.8085e-01  1.8849e+00\nNG033003 Ahoada West         8.4077e-01 -1.6277e-03  2.5025e-01  1.6840e+00\nNG030001 Aiyedade           -1.9940e-03 -1.2099e-02  1.3113e+00  8.8241e-03\nNG030002 Aiyedire            3.0859e-01 -2.2324e-04  2.4486e-02  1.9735e+00\nNG013002 Aiyekire (Gbonyin)  2.5468e-01 -3.1865e-04  3.0540e-02  1.4592e+00\nNG023002 Ajaokuta            9.3035e-03 -6.3380e-06  8.1230e-04  3.2665e-01\nNG025002 Ajeromi-Ifelodun    1.0902e+00 -1.5504e-03  3.9834e-01  1.7298e+00\nNG020001 Ajingi              8.0526e-02 -1.9868e-05  2.5464e-03  1.5962e+00\nNG009002 Akamkpa             2.2617e-01 -2.7477e-05  3.0145e-03  4.1198e+00\nNG031002 Akinyele           -1.7370e-01 -3.5422e-04  3.8849e-02 -8.7950e-01\nNG016001 Akko                3.6215e+00 -1.7248e-02  1.6251e+00  2.8544e+00\nNG012001 Akoko-Edo          -9.7994e-02 -6.9507e-05  4.8271e-03 -1.4094e+00\nNG029001 Akoko North East    2.6132e+00 -5.7830e-03  6.3080e-01  3.2975e+00\nNG029002 Akoko North West    1.8731e+00 -1.5753e-02  2.9886e+00  1.0926e+00\nNG029003 Akoko South East    2.9695e+00 -3.9022e-03  7.4920e-01  3.4353e+00\nNG029004 Akoko South West    4.0806e+00 -1.3638e-02  2.0716e+00  2.8446e+00\nNG009003 Akpabuyo            7.7463e-01 -8.2075e-03  1.5690e+00  6.2497e-01\nNG033004 Akuku Toru          7.5445e-01 -1.3297e-03  3.4172e-01  1.2929e+00\nNG029005 Akure North        -9.4511e-02 -2.0041e-04  2.5680e-02 -5.8852e-01\nNG029006 Akure South        -4.0892e-01 -1.0618e-03  2.7294e-01 -7.8067e-01\nNG026001 Akwanga             1.7264e-02 -1.8555e-06  3.5764e-04  9.1300e-01\nNG020002 Albasu             -6.0666e-01 -4.4019e-03  6.7490e-01 -7.3309e-01\nNG022001 Aleiro              3.8136e-02 -1.0903e-05  2.1016e-03  8.3213e-01\nNG025003 Alimosho           -2.6481e-01 -9.2780e-04  1.0170e-01 -8.2749e-01\nNG005001 Alkaleri           -3.6486e-01 -1.7389e-04  1.6668e-02 -2.8247e+00\nNG025004 Amuwo-Odofin        6.4059e-01 -1.0618e-03  1.0169e-01  2.0122e+00\nNG004002 Anambra East        5.2295e-01 -6.1632e-04  7.8942e-02  1.8634e+00\nNG004003 Anambra West        5.1817e-01 -5.6910e-04  5.4530e-02  2.2214e+00\nNG004004 Anaocha             6.8852e-01 -7.1640e-04  7.8541e-02  2.4593e+00\nNG033005 Andoni              7.4747e-01 -8.8063e-04  2.2641e-01  1.5727e+00\nNG014001 Aninri              5.8669e-01 -1.6277e-03  2.5025e-01  1.1760e+00\nNG010001 Aniocha North       9.1402e-01 -1.2599e-03  2.4254e-01  1.8585e+00\nNG010002 Aniocha South       7.1930e-01 -1.3297e-03  1.4569e-01  1.8880e+00\nNG037001 Anka               -3.0961e-02 -5.2377e-04  8.0617e-02 -1.0720e-01\nNG023003 Ankpa               3.2899e-03 -3.3373e-07  3.6614e-05  5.4375e-01\nNG007003 Apa                 7.1599e-02 -2.9126e-04  4.4841e-02  3.3949e-01\nNG025005 Apapa               1.1170e+00 -1.6277e-03  2.0827e-01  2.4512e+00\nNG035001 Ardo-Kola           5.9556e-01 -6.0715e-04  7.7767e-02  2.1378e+00\nNG022002 Arewa-Dandi        -7.0312e-02 -2.9456e-05  2.8239e-03 -1.3226e+00\nNG022003 Argungu             4.0210e-02 -3.1865e-04  4.9056e-02  1.8298e-01\nNG001003 Arochukwu           9.0458e-02 -1.1259e-03  1.4414e-01  2.4123e-01\nNG024001 Asa                 6.6358e-02 -1.8555e-06  2.0357e-04  4.6511e+00\nNG033006 Asari-Toru          9.9615e-01 -1.1259e-03  4.3469e-01  1.5126e+00\nNG008002 Askira/Uba          9.5142e-01 -1.1259e-03  9.5720e-02  3.0788e+00\nNG030003 Atakumosa East      1.5763e+00 -2.3901e-03  3.6719e-01  2.6053e+00\nNG030004 Atakumosa West      1.3676e+00 -3.5471e-03  3.0082e-01  2.4999e+00\nNG031003 Atiba               9.2471e-02 -1.4925e-04  1.4307e-02  7.7435e-01\nNG031004 Atigbo             -3.7128e-02 -8.3203e-05  1.0663e-02 -3.5875e-01\nNG022004 Augie              -3.1518e-02 -1.2649e-04  1.6210e-02 -2.4656e-01\nNG018001 Auyo               -9.2317e-03 -1.9519e-04  2.1411e-02 -6.1757e-02\nNG026002 Awe                -3.8035e-02 -2.3951e-06  2.2963e-04 -2.5098e+00\nNG014002 Awgu                7.1490e-01 -1.0618e-03  1.3594e-01  1.9419e+00\nNG004005 Awka North          8.4336e-01 -1.6277e-03  1.7829e-01  2.0012e+00\nNG004006 Awka South          7.2523e-01 -9.9952e-04  1.5377e-01  1.8520e+00\nNG004007 Ayamelum            5.3888e-01 -4.8031e-04  7.3931e-02  1.9837e+00\nNG018002 Babura              3.4904e+00 -9.4838e-03  1.4466e+00  2.9099e+00\nNG025006 Badagry             1.1262e+00 -3.3198e-03  8.5145e-01  1.2241e+00\nNG036001 Bade               -4.1318e-01 -3.9167e-04  7.5464e-02 -1.5026e+00\nNG022005 Bagudo             -1.6794e-01 -5.4275e-05  8.3578e-03 -1.8364e+00\nNG020003 Bagwai             -1.0457e-01 -3.8586e-05  4.2332e-03 -1.6066e+00\nNG009005 Bakassi             0.0000e+00  0.0000e+00  0.0000e+00         NaN\nNG021001 Bakori              9.7051e-02 -1.4925e-04  1.9126e-02  7.0284e-01\nNG037002 Bakura              1.3239e-01 -1.1259e-03  1.4414e-01  3.5167e-01\nNG016002 Balanga             8.6819e-01 -5.3489e-03  5.8371e-01  1.1434e+00\nNG035002 Bali                2.8316e-01 -1.6128e-03  1.3704e-01  7.6927e-01\nNG008003 Bama                1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00\nNG032001 Barikin Ladi        1.5674e+00 -3.2090e-03  4.0996e-01  2.4530e+00\nNG024002 Baruten             1.5345e-02 -2.7477e-05  3.5215e-03  2.5904e-01\nNG023004 Bassa               6.5838e-03 -9.8783e-04  9.4613e-02  2.4616e-02\nNG032002 Bassa               7.6830e-02 -6.6449e-05  8.5158e-03  8.3329e-01\nNG021002 Batagarawa          1.0339e-01 -8.3203e-05  9.1276e-03  1.0831e+00\nNG021003 Batsari             1.3652e-02 -1.0184e-04  1.5681e-02  1.0983e-01\nNG005002 Bauchi              1.1441e-01 -8.6620e-05  1.3338e-02  9.9137e-01\nNG021004 Baure               1.7511e+00 -5.0690e-03  7.7665e-01  1.9927e+00\nNG008004 Bayo                2.3957e-01 -3.9905e-04  6.1428e-02  9.6821e-01\nNG020004 Bebeji             -3.3289e-02 -9.9952e-04  1.5377e-01 -8.2343e-02\nNG009006 Bekwara             1.3164e+00 -1.5358e-03  2.3615e-01  2.7122e+00\nNG001004 Bende               4.0316e-01 -6.6542e-04  6.3753e-02  1.5994e+00\nNG009007 Biase               1.8824e-01 -2.5316e-04  2.4265e-02  1.2100e+00\nNG020005 Bichi              -1.4448e-01 -1.0184e-04  1.3051e-02 -1.2638e+00\nNG027003 Bida               -2.7746e-01 -1.2649e-04  4.8883e-02 -1.2544e+00\nNG016003 Billiri             2.5014e+00 -3.3198e-03  6.3776e-01  3.1364e+00\nNG021005 Bindawa            -6.5757e-02 -1.2235e-04  1.5680e-02 -5.2416e-01\nNG034001 Binji              -1.5657e-01 -3.5422e-04  4.5383e-02 -7.3329e-01\nNG018003 Biriniwa           -4.0714e-01 -7.5196e-03  9.5649e-01 -4.0861e-01\nNG018004 Birni Kudu         -5.2572e-04 -5.6910e-04  5.4530e-02  1.8579e-04\nNG019001 Birnin-Gwari        1.4369e+00 -5.3489e-03  4.0699e-01  2.2607e+00\nNG022006 Birnin Kebbi       -3.8910e-01 -6.1632e-04  7.8942e-02 -1.3827e+00\nNG037003 Birnin Magaji       2.8350e-01 -3.9905e-04  5.1123e-02  1.2556e+00\nNG008005 Biu                 1.1070e+00 -1.6277e-03  1.5580e-01  2.8086e+00\nNG034002 Bodinga            -3.9128e-03 -2.7477e-05  4.2313e-03 -5.9730e-02\nNG005003 Bogoro             -2.2763e-01 -2.2881e-04  5.8867e-02 -9.3725e-01\nNG009008 Boki                2.6518e+00 -7.0234e-03  1.0740e+00  2.5656e+00\nNG032003 Bokkos              5.0676e-01 -2.2324e-04  2.8605e-02  2.9976e+00\nNG030005 Boluwaduro          3.1906e-01 -8.3203e-05  1.6036e-02  2.5203e+00\nNG010003 Bomadi              6.1173e-01 -1.4014e-03  2.1550e-01  1.3208e+00\nNG033007 Bonny               1.0868e+00 -1.6277e-03  2.0827e-01  2.3850e+00\nNG027004 Borgu              -1.6043e-01 -2.5910e-04  2.2046e-02 -1.0787e+00\nNG030006 Boripe              1.1122e+00 -1.7723e-03  2.2675e-01  2.3395e+00\nNG027005 Bosso              -2.0497e-02 -1.4925e-04  1.9126e-02 -1.4713e-01\nNG006001 Brass               2.9959e-01 -6.1632e-04  2.3806e-01  6.1529e-01\nNG018005 Buji                4.5026e-03 -3.3373e-07  5.1394e-05  6.2812e-01\nNG037004 Bukkuyum           -3.1431e-02 -2.5910e-04  3.9890e-02 -1.5607e-01\nNG037005 Bungudu             2.0237e-01 -8.8063e-04  1.1277e-01  6.0526e-01\nNG020006 Bunkure             3.6342e-02 -1.2649e-04  1.3876e-02  3.0959e-01\nNG022007 Bunza               8.8429e-01 -2.5835e-03  3.9683e-01  1.4079e+00\nNG036002 Bursari             4.7994e-01 -5.2377e-04  5.0189e-02  2.1447e+00\nNG007004 Buruku              5.0409e-01 -7.5901e-04  9.7204e-02  1.6193e+00\nNG010004 Burutu              8.0259e-01 -1.4014e-03  2.6973e-01  1.5480e+00\nNG015003 Bwari               3.2095e-01 -2.5316e-04  4.8784e-02  1.4543e+00\nNG009010 Calabar-Municipal  -5.6408e-01 -2.2881e-04  5.8867e-02 -2.3240e+00\nNG009009 Calabar South       1.0900e-01 -3.8586e-05  7.4371e-03  1.2644e+00\nNG027006 Chanchaga           1.4615e-02 -2.3951e-06  1.8538e-03  3.3950e-01\nNG021006 Charanchi           5.5125e-02 -5.1577e-05  6.6100e-03  6.7866e-01\nNG008006 Chibok              9.5921e-01 -1.0618e-03  2.7294e-01  1.8380e+00\nNG019002 Chikun             -9.5427e-01 -1.3297e-03  1.2731e-01 -2.6707e+00\nNG020007 Dala               -1.5215e-01 -1.2235e-04  2.3581e-02 -9.8999e-01\nNG036003 Damaturu            1.0215e+00 -1.4014e-03  2.1550e-01  2.2035e+00\nNG005004 Damban              1.7310e-02 -1.8249e-05  2.3389e-03  3.5830e-01\nNG020008 Dambatta            5.8823e-01 -8.6966e-04  1.3381e-01  1.6104e+00\nNG008007 Damboa              1.2015e+00 -1.6277e-03  1.5580e-01  3.0481e+00\nNG021007 Dan Musa            1.9828e-01 -1.1259e-03  1.2339e-01  5.6767e-01\nNG022008 Dandi               6.0353e-01 -5.2080e-03  9.9861e-01  6.0916e-01\nNG021008 Dandume             2.5690e-02 -1.8555e-06  3.5764e-04  1.3585e+00\nNG034003 Dange-Shuni         8.6937e-02 -1.2649e-04  1.3876e-02  7.3910e-01\nNG021009 Danja              -2.5042e-01 -2.9126e-04  3.7319e-02 -1.2948e+00\nNG005005 Darazo              5.2452e-03 -1.0903e-05  1.1962e-03  1.5197e-01\nNG005006 Dass                2.4361e-01 -3.6124e-04  1.3957e-01  6.5305e-01\nNG021010 Daura               4.0067e-01 -8.1339e-04  2.0914e-01  8.7790e-01\nNG020009 Dawakin Kudu       -1.3898e-01 -4.3100e-04  5.5216e-02 -5.8963e-01\nNG020010 Dawakin Tofa        5.3574e-01 -1.0618e-03  1.3594e-01  1.4559e+00\nNG033008 Degema              8.9537e-01 -1.4749e-03  1.4120e-01  2.3867e+00\nNG023005 Dekina              1.9339e-02 -8.1339e-04  1.5665e-01  5.0915e-02\nNG002001 Demsa               7.6650e-01 -1.4014e-03  1.5353e-01  1.9598e+00\nNG008008 Dikwa               1.2582e+00 -1.6277e-03  2.0827e-01  2.7606e+00\nNG020011 Doguwa             -8.4890e-03 -1.0903e-05  1.3974e-03 -2.2680e-01\nNG026003 Doma               -6.3606e-02 -5.4275e-05  4.6190e-03 -9.3509e-01\nNG035003 Donga               1.1977e+00 -1.6128e-03  1.5437e-01  3.0525e+00\nNG016004 Dukku               2.0702e+00 -5.2080e-03  5.6841e-01  2.7528e+00\nNG004008 Dunukofia           5.5459e-01 -6.1632e-04  9.4853e-02  1.8027e+00\nNG018006 Dutse              -2.2400e-01 -1.4749e-03  1.4120e-01 -5.9220e-01\nNG021011 Dutsi              -2.0141e-01 -2.0041e-04  2.1983e-02 -1.3571e+00\nNG021012 Dutsin-Ma          -6.0268e-02 -6.0715e-04  7.7767e-02 -2.1394e-01\nNG003002 Eastern Obolo       1.3772e-01 -3.9905e-04  6.1428e-02  5.5729e-01\nNG011004 Ebonyi             -8.3981e-03 -2.3951e-06  3.0697e-04 -4.7919e-01\nNG027007 Edati               3.9793e-01 -1.6916e-03  6.5269e-01  4.9464e-01\nNG030007 Ede North           5.9514e-02 -6.6449e-05  1.7098e-02  4.5565e-01\nNG030008 Ede South          -8.1927e-02 -6.3380e-06  5.3942e-04 -3.5272e+00\nNG024003 Edu                 5.1947e+00 -7.3523e-03  1.1239e+00  4.9069e+00\nNG013003 Efon               -6.0047e-01 -3.2531e-04  6.2682e-02 -2.3971e+00\nNG028004 Egbado North        4.1374e-01 -3.2531e-04  5.0081e-02  1.8503e+00\nNG028005 Egbado South       -5.1956e-02 -1.4749e-03  2.2680e-01 -1.0600e-01\nNG031005 Egbeda             -5.0841e-02 -5.4275e-05  8.3578e-03 -5.5552e-01\nNG030009 Egbedore            1.4958e-01 -5.1577e-05  4.9446e-03  2.1279e+00\nNG012002 Egor                8.7695e-02 -2.0041e-04  5.1562e-02  3.8708e-01\nNG017003 Ehime-Mbano         2.6769e-01 -3.2531e-04  5.0081e-02  1.1976e+00\nNG030010 Ejigbo              6.3460e-01 -7.8598e-03  8.5553e-01  6.9459e-01\nNG006002 Ekeremor            2.1155e-01 -1.4925e-04  2.8763e-02  1.2482e+00\nNG003003 Eket                2.1926e-02 -1.0562e-04  2.0355e-02  1.5442e-01\nNG024004 Ekiti               1.3996e+00 -5.9315e-03  7.5570e-01  1.6168e+00\nNG013004 Ekiti East         -1.0664e+00 -1.3297e-03  2.0450e-01 -2.3552e+00\nNG013005 Ekiti South West    6.1959e-01 -1.2468e-03  1.3661e-01  1.6797e+00\nNG013006 Ekiti West          6.6563e-01 -1.5358e-03  1.4701e-01  1.7400e+00\nNG004009 Ekwusigo            8.4749e-01 -1.4014e-03  2.1550e-01  1.8286e+00\nNG033009 Eleme               9.4563e-01 -1.6277e-03  2.0827e-01  2.0757e+00\nNG033010 Emohua              6.9021e-01 -1.4749e-03  1.4120e-01  1.8408e+00\nNG013007 Emure              -7.7908e-01 -5.2377e-04  8.0617e-02 -2.7421e+00\nNG014003 Enugu East          7.7086e-01 -1.3297e-03  2.0450e-01  1.7076e+00\nNG014004 Enugu North         9.2093e-01 -1.5504e-03  2.3838e-01  1.8894e+00\nNG014005 Enugu South         7.6545e-01 -1.5504e-03  3.9834e-01  1.2153e+00\nNG025007 Epe                -3.6995e-01 -1.7723e-03  1.6962e-01 -8.9396e-01\nNG012003 Esan Central        3.0774e-01 -4.3874e-04  8.4529e-02  1.0600e+00\nNG012004 Esan North East     2.7947e-01 -4.3874e-04  6.7535e-02  1.0771e+00\nNG012005 Esan South East     3.0774e-01 -4.3874e-04  3.7324e-02  1.5952e+00\nNG012006 Esan West           2.5330e-01 -5.2377e-04  6.7093e-02  9.7994e-01\nNG029007 Ese-Odo            -1.1965e-01 -8.1339e-04  1.2516e-01 -3.3591e-01\nNG003004 Esit - Eket        -6.6417e-02 -2.2324e-04  2.8605e-02 -3.9138e-01\nNG003005 Essien Udim        -9.9313e-03 -6.3380e-06  6.9535e-04 -3.7638e-01\nNG033011 Etche               3.5951e-01 -9.9952e-04  1.0955e-01  1.0892e+00\nNG010005 Ethiope East        1.7751e-01 -7.1640e-04  1.3799e-01  4.7979e-01\nNG010006 Ethiope West        2.3959e-01 -5.6910e-04  8.7591e-02  8.1148e-01\nNG025008 Eti-Osa             3.5680e-01 -1.6277e-03  2.5025e-01  7.1649e-01\nNG003006 Etim Ekpo           5.9762e-04 -6.9507e-05  8.9077e-03  7.0684e-03\nNG003007 Etinan             -5.3116e-02 -2.0041e-04  3.0857e-02 -3.0124e-01\nNG012007 Etsako Central      1.7582e-01 -1.4925e-04  2.2981e-02  1.1608e+00\nNG012008 Etsako East         1.5230e-01 -3.2531e-04  2.7678e-02  9.1739e-01\nNG012009 Etsako West         2.4259e-01 -3.6124e-04  3.9618e-02  1.2206e+00\nNG009011 Etung               1.4001e+00 -1.6916e-03  4.3457e-01  2.1265e+00\nNG028006 Ewekoro             5.2532e-01 -7.6926e-04  9.8516e-02  1.6761e+00\nNG014006 Ezeagu              7.5812e-01 -9.3914e-04  1.4449e-01  1.9969e+00\nNG017004 Ezinihitte          1.6424e-01 -4.8031e-04  7.3931e-02  6.0582e-01\nNG011005 Ezza North          5.8749e-01 -8.6966e-04  1.1136e-01  1.7631e+00\nNG011006 Ezza South          3.6410e-01 -3.1865e-04  4.9056e-02  1.6453e+00\nNG020012 Fagge               1.8579e-01 -1.3297e-03  2.0450e-01  4.1378e-01\nNG022009 Fakai              -3.2768e-01 -9.3914e-04  1.0294e-01 -1.0184e+00\nNG021013 Faskari             2.4600e-02 -1.3162e-03  1.2602e-01  7.3004e-02\nNG036004 Fika                1.7425e-01 -1.3297e-03  1.1302e-01  5.2226e-01\nNG002002 Fufore              1.1271e+00 -1.6277e-03  2.0827e-01  2.4733e+00\nNG016005 Funakaye            9.0870e-01 -4.5316e-03  6.9469e-01  1.0957e+00\nNG036005 Fune                5.8078e-01 -4.8031e-04  4.6027e-02  2.7094e+00\nNG021014 Funtua             -3.7568e-01 -5.6910e-04  8.7591e-02 -1.2675e+00\nNG020013 Gabasawa           -1.2497e-01 -1.3297e-03  1.7019e-01 -2.9970e-01\nNG034004 Gada               -1.3336e-01 -3.9905e-04  7.6885e-02 -4.7953e-01\nNG018007 Gagarawa           -2.0255e-01 -6.9507e-05  8.9077e-03 -2.1454e+00\nNG005007 Gamawa             -7.6106e-01 -1.0452e-02  1.3256e+00 -6.5195e-01\nNG005008 Ganjuwa             2.7157e-02 -8.8063e-04  8.4354e-02  9.6537e-02\nNG002003 Ganye               5.0818e-01 -1.2599e-03  2.4254e-01  1.0344e+00\nNG018008 Garki               2.6512e-01 -1.9394e-03  1.8558e-01  6.1993e-01\nNG020014 Garko              -5.3344e-01 -8.8063e-04  9.6531e-02 -1.7141e+00\nNG020015 Garum Mallam       -1.6336e-02 -1.8555e-06  2.8574e-04 -9.6630e-01\nNG035004 Gashaka             1.1751e-01 -5.1531e-04  9.9274e-02  3.7459e-01\nNG035005 Gassol              1.3117e+00 -3.6636e-03  4.6782e-01  1.9231e+00\nNG020016 Gaya               -1.3765e-01 -1.4014e-03  2.6973e-01 -2.6234e-01\nNG027008 Gbako               4.2520e-02 -9.8783e-04  1.5197e-01  1.1160e-01\nNG007005 Gboko               7.7837e-01 -8.6966e-04  1.3381e-01  2.1302e+00\nNG036006 Geidam              1.1322e+00 -1.6277e-03  2.0827e-01  2.4844e+00\nNG020017 Gezawa             -6.3029e-01 -2.3901e-03  3.6719e-01 -1.0362e+00\nNG005009 Giade               4.9513e-02 -8.6620e-05  1.6694e-02  3.8387e-01\nNG002005 Girei               1.0825e+00 -1.4749e-03  2.2680e-01  2.2762e+00\nNG019003 Giwa                3.8218e+00 -8.7432e-03  7.3761e-01  4.4601e+00\nNG033012 Gokana              1.0730e+00 -1.5504e-03  2.9837e-01  1.9672e+00\nNG016006 Gombe              -1.8102e-01 -6.3380e-06  2.4496e-03 -3.6574e+00\nNG002004 Gombi               7.0598e-01 -6.1632e-04  7.8942e-02  2.5149e+00\nNG034006 Goronyo             1.6376e-01 -2.0041e-04  2.5680e-02  1.0232e+00\nNG008009 Gubio               1.2461e+00 -1.6277e-03  2.5025e-01  2.4942e+00\nNG034007 Gudu               -5.9560e-02 -3.2531e-04  8.3685e-02 -2.0476e-01\nNG036007 Gujba               1.1415e+00 -1.6277e-03  1.7829e-01  2.7074e+00\nNG036008 Gulani             -2.9028e-01 -1.5504e-03  1.6983e-01 -7.0062e-01\nNG007006 Guma                2.0483e-01 -3.5422e-04  3.0137e-02  1.1819e+00\nNG018009 Gumel               3.8132e-01 -1.0059e-02  2.5625e+00  2.4450e-01\nNG037006 Gummi               6.0271e-02 -3.9905e-04  4.3763e-02  2.9001e-01\nNG027009 Gurara             -1.8991e-02 -3.2531e-04  3.5679e-02 -9.8820e-02\nNG018010 Guri               -2.6016e-01 -4.8031e-04  5.2671e-02 -1.1315e+00\nNG037007 Gusau              -1.5029e-02 -6.9507e-05  6.6634e-03 -1.8326e-01\nNG002006 Guyuk               2.5243e-01 -8.8063e-04  1.6959e-01  6.1511e-01\nNG008010 Guzamala            1.2582e+00 -1.6277e-03  2.0827e-01  2.7606e+00\nNG034005 Gwadabawa          -1.6611e-02 -8.3203e-05  1.0663e-02 -1.6006e-01\nNG015004 Gwagwalada          4.4939e-02 -8.3203e-05  1.0663e-02  4.3600e-01\nNG020018 Gwale               1.2976e-01 -3.2531e-04  6.2682e-02  5.1958e-01\nNG022010 Gwandu              3.3150e-02 -2.3901e-03  4.5958e-01  5.2424e-02\nNG018011 Gwaram              1.7154e-01 -8.2400e-04  7.8934e-02  6.1351e-01\nNG020019 Gwarzo              4.4473e-01 -9.9952e-04  1.2798e-01  1.2460e+00\nNG007007 Gwer East           1.9014e-01 -1.2468e-03  1.0598e-01  5.8789e-01\nNG007008 Gwer West          -3.5537e-02 -5.2377e-04  6.7093e-02 -1.3517e-01\nNG018012 Gwiwa               1.5685e-01 -3.9167e-04  5.0179e-02  7.0197e-01\nNG008011 Gwoza               1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00\nNG018013 Hadejia             4.8530e-01 -1.6916e-03  4.3457e-01  7.3874e-01\nNG008012 Hawul               1.0595e+00 -1.4749e-03  2.2680e-01  2.2278e+00\nNG002007 Hong                1.0249e+00 -1.4749e-03  1.8875e-01  2.3625e+00\nNG031006 Ibadan North       -1.6524e-02 -1.3297e-03  2.0450e-01 -3.3600e-02\nNG031007 Ibadan North East  -2.9120e-02 -1.0903e-05  1.3974e-03 -7.7869e-01\nNG031008 Ibadan North West   2.3890e-01 -2.5910e-04  3.9890e-02  1.1974e+00\nNG031009 Ibadan South East   1.9144e-01 -1.1920e-03  1.8334e-01  4.4987e-01\nNG031010 Ibadan South West   2.6967e-01 -2.5910e-04  4.9927e-02  1.2081e+00\nNG023006 Ibaji               2.2770e-01 -2.0041e-04  2.1983e-02  1.5371e+00\nNG031011 Ibarapa Central    -2.2712e-01 -7.5901e-04  1.1680e-01 -6.6235e-01\nNG031012 Ibarapa East        1.8845e-02 -4.0925e-05  5.2449e-03  2.6077e-01\nNG031013 Ibarapa North      -3.8965e-02 -5.6029e-04  8.6235e-02 -1.3078e-01\nNG025009 Ibeju/Lekki         2.2390e-03 -1.0903e-05  4.2140e-03  3.4659e-02\nNG003008 Ibeno               1.2904e-01 -8.2400e-04  1.2679e-01  3.6470e-01\nNG003009 Ibesikpo Asutan    -9.1998e-03 -1.4925e-04  2.2981e-02 -5.9702e-02\nNG035006 Ibi                -4.0001e-01 -2.9126e-04  3.1946e-02 -2.2364e+00\nNG003010 Ibiono Ibom         1.3579e-02 -1.0562e-04  1.3535e-02  1.1762e-01\nNG023007 Idah                6.7715e-02 -1.9868e-05  5.1126e-03  9.4731e-01\nNG029008 Idanre              2.5630e-01 -1.6903e-04  1.4384e-02  2.1384e+00\nNG017005 Ideato North        8.9115e-01 -1.3297e-03  1.2731e-01  2.5013e+00\nNG017006 Ideato South        8.3080e-01 -1.1920e-03  2.2948e-01  1.7368e+00\nNG004010 Idemili North       8.3572e-01 -1.4749e-03  1.6158e-01  2.0827e+00\nNG004011 Idemili South       9.4127e-01 -1.3297e-03  1.7019e-01  2.2849e+00\nNG031014 Ido                 1.3369e-01 -1.4925e-04  1.4307e-02  1.1189e+00\nNG013008 Ido-Osi            -2.6395e-01 -1.4014e-03  2.1550e-01 -5.6557e-01\nNG025010 Ifako-Ijaye        -8.5516e-02 -4.8031e-04  7.3931e-02 -3.1274e-01\nNG030011 Ife Central         1.2702e+00 -2.3901e-03  4.5958e-01  1.8772e+00\nNG030012 Ife East            1.8042e+00 -3.5471e-03  6.8127e-01  2.1902e+00\nNG030013 Ife North           5.3311e-01 -3.1865e-04  3.4949e-02  2.8534e+00\nNG030014 Ife South           1.1625e+00 -9.2780e-04  1.1880e-01  3.3755e+00\nNG030015 Ifedayo            -2.4336e-01 -4.0925e-05  5.2449e-03 -3.3597e+00\nNG029009 Ifedore             6.2924e-01 -2.4859e-03  2.7205e-01  1.2112e+00\nNG024005 Ifelodun            7.9307e+00 -5.2576e-02  3.4595e+00  4.2921e+00\nNG030016 Ifelodun            1.2027e+00 -1.1135e-03  2.8623e-01  2.2501e+00\nNG028007 Ifo                 1.2091e-01 -9.3914e-04  7.9854e-02  4.3119e-01\nNG019004 Igabi               4.7157e+00 -2.8615e-02  2.3657e+00  3.0846e+00\nNG023008 Igalamela-Odolu     5.1810e-01 -7.1640e-04  6.0928e-02  2.1019e+00\nNG014007 Igbo-Etiti          6.0252e-01 -8.2400e-04  1.2679e-01  1.6944e+00\nNG014008 Igbo-Eze North      7.8575e-01 -1.4014e-03  2.1550e-01  1.6956e+00\nNG014009 Igbo-Eze South      9.7099e-01 -1.4014e-03  2.6973e-01  1.8723e+00\nNG012010 Igueben             1.2618e-01 -1.7389e-04  2.2283e-02  8.4644e-01\nNG004012 Ihiala              2.4753e-01 -1.4925e-04  1.6372e-02  1.9357e+00\nNG017007 Ihitte/Uboma        3.1114e-01 -5.6910e-04  8.7591e-02  1.0532e+00\nNG028008 Ijebu East         -9.1066e-01 -1.4749e-03  1.2534e-01 -2.5680e+00\nNG028009 Ijebu North        -2.1566e-02 -5.4275e-05  5.2032e-03 -2.9822e-01\nNG028010 Ijebu North East    1.0003e-02 -3.3373e-07  6.4326e-05  1.2473e+00\nNG028011 Ijebu Ode           7.6232e-02 -6.1632e-04  1.1872e-01  2.2303e-01\nNG013009 Ijero              -2.1311e-01 -2.9930e-03  4.5953e-01 -3.0996e-01\nNG023009 Ijumu               3.4728e-01 -3.9167e-04  3.7536e-02  1.7945e+00\nNG003011 Ika                -8.7294e-03 -3.3373e-07  6.4326e-05 -1.0884e+00\nNG010007 Ika North East      6.1088e-01 -1.6277e-03  2.5025e-01  1.2244e+00\nNG010008 Ika South           3.7480e-01 -8.8063e-04  1.6959e-01  9.1226e-01\nNG019005 Ikara              -3.3429e-01 -5.6910e-04  6.2402e-02 -1.3359e+00\nNG017008 Ikeduru             2.8228e-01 -6.6542e-04  1.0240e-01  8.8420e-01\nNG025011 Ikeja               7.8513e-01 -1.5504e-03  1.4841e-01  2.0421e+00\nNG028012 Ikenne              2.9551e-01 -1.0618e-03  2.0444e-01  6.5590e-01\nNG013010 Ikere               1.1550e-01 -1.4475e-04  2.2288e-02  7.7463e-01\nNG013011 Ikole               3.1773e-01 -6.5588e-04  7.1911e-02  1.1873e+00\nNG009012 Ikom                1.7514e+00 -1.8549e-03  2.3729e-01  3.5991e+00\nNG003012 Ikono               2.8249e-02 -1.9868e-05  2.1798e-03  6.0548e-01\nNG025012 Ikorodu            -7.1532e-02 -4.3100e-04  6.6345e-02 -2.7604e-01\nNG003013 Ikot Abasi          4.7478e-02 -6.9507e-05  1.0703e-02  4.5959e-01\nNG003014 Ikot Ekpene         6.4821e-03 -8.6620e-05  2.2288e-02  4.3999e-02\nNG012011 Ikpoba-Okha         3.1590e-02 -1.9868e-05  2.1798e-03  6.7706e-01\nNG033013 Ikwerre             4.3466e-01 -1.4749e-03  2.8387e-01  8.1859e-01\nNG011007 Ikwo                1.6600e-01 -2.7477e-05  3.5215e-03  2.7978e+00\nNG001005 Ikwuano            -1.4055e-02 -1.8555e-06  2.3780e-04 -9.1131e-01\nNG030017 Ila                 1.0542e+00 -5.6029e-04  6.1436e-02  4.2556e+00\nNG029010 Ilaje              -4.6502e-02 -6.6542e-04  1.2817e-01 -1.2803e-01\nNG029011 Ile-Oluji-Okeigbo   1.7965e+00 -2.2962e-03  3.5280e-01  3.0285e+00\nNG013012 Ilejemeji          -2.0831e-01 -3.2531e-04  6.2682e-02 -8.3073e-01\nNG030018 Ilesha East         4.5466e-01 -1.9519e-04  3.7616e-02  2.3452e+00\nNG030019 Ilesha West         1.0931e-01 -1.0903e-05  2.1016e-03  2.3847e+00\nNG034008 Illela             -9.5441e-02 -1.0497e-03  2.6985e-01 -1.8171e-01\nNG024006 Ilorin East        -3.2929e-01 -4.0925e-05  7.8878e-03 -3.7072e+00\nNG024007 Ilorin South       -1.7755e-01 -1.2162e-05  2.3443e-03 -3.6668e+00\nNG024008 Ilorin West         5.6912e-01 -2.2324e-04  3.4370e-02  3.0710e+00\nNG028013 Imeko-Afon         -2.7842e-01 -1.6277e-03  2.5025e-01 -5.5330e-01\nNG021015 Ingawa             -2.2698e-02 -3.9905e-04  3.3949e-02 -1.2102e-01\nNG003015 Ini                 2.3604e-01 -7.1640e-04  9.1751e-02  7.8162e-01\nNG028014 Ipokia             -3.1866e-01 -2.5910e-04  4.9927e-02 -1.4250e+00\nNG029012 Irele               3.4339e-01 -2.2324e-04  4.3019e-02  1.6567e+00\nNG031015 Irepo              -2.1322e-02 -1.2162e-05  2.3443e-03 -4.4012e-01\nNG024009 Irepodun            6.6949e+00 -1.1886e-02  1.5053e+00  5.4665e+00\nNG030020 Irepodun            5.6083e-03 -1.5384e-07  3.9589e-05  8.9137e-01\nNG013013 Irepodun/Ifelodun  -2.1211e-01 -1.2649e-04  1.2126e-02 -1.9251e+00\nNG030021 Irewole             1.6871e-01 -6.6449e-05  1.0232e-02  1.6685e+00\nNG034009 Isa                 2.2350e-01 -9.9952e-04  1.2798e-01  6.2755e-01\nNG013014 Ise/Orun           -3.6619e-01 -1.5504e-03  1.9839e-01 -8.1866e-01\nNG031016 Iseyin             -6.0131e-03 -8.2400e-04  7.8934e-02 -1.8470e-02\nNG011008 Ishielu             4.5740e-01 -1.6916e-03  1.8527e-01  1.0666e+00\nNG014010 Isi-Uzo            -1.8197e-02 -1.8555e-06  1.5792e-04 -1.4479e+00\nNG001006 Isiala-Ngwa North   6.1303e-03 -1.0562e-04  1.6263e-02  4.8899e-02\nNG001007 Isiala-Ngwa South  -2.2750e-02 -5.4275e-05  5.9543e-03 -2.9412e-01\nNG017009 Isiala Mbano        1.3585e-01 -5.4275e-05  6.9558e-03  1.6296e+00\nNG024010 Isin                1.6027e+00 -2.2324e-04  5.7433e-02  6.6885e+00\nNG001008 Isiukwuato          4.3276e-01 -5.6910e-04  8.7591e-02  1.4642e+00\nNG030022 Isokan              1.3356e-01 -5.1577e-05  7.9423e-03  1.4992e+00\nNG010009 Isoko North         1.8036e-01 -2.9126e-04  5.6124e-02  7.6255e-01\nNG010010 Isoko South         2.2985e-01 -5.2377e-04  8.0617e-02  8.1138e-01\nNG017010 Isu                 8.0179e-01 -1.4749e-03  2.8387e-01  1.5076e+00\nNG005010 Itas/Gadau         -1.3378e-02 -2.3951e-06  2.2963e-04 -8.8267e-01\nNG031017 Itesiwaju          -1.9886e-01 -1.1259e-03  2.1678e-01 -4.2469e-01\nNG003016 Itu                 2.5139e-02 -1.0903e-05  2.1016e-03  5.4861e-01\nNG011009 Ivo                 2.9981e-01 -5.6910e-04  7.2897e-02  1.1125e+00\nNG031018 Iwajowa            -2.7264e-01 -1.3875e-03  1.7758e-01 -6.4368e-01\nNG030023 Iwo                 2.9537e-04 -1.5384e-07  2.3692e-05  6.0714e-02\nNG011010 Izzi               -2.3819e-01 -1.4925e-04  2.2981e-02 -1.5702e+00\nNG019006 Jaba                1.8019e+00 -2.4859e-03  3.8186e-01  2.9200e+00\nNG002008 Jada                1.0926e+00 -1.4014e-03  3.6011e-01  1.8231e+00\nNG018014 Jahun               4.1537e-02 -1.9868e-05  2.5464e-03  8.2353e-01\nNG036009 Jakusko            -1.3994e-01 -1.3297e-03  1.4569e-01 -3.6315e-01\nNG035007 Jalingo             2.7125e-01 -2.5316e-04  6.5130e-02  1.0638e+00\nNG005011 Jama'are           -2.1869e-03 -1.9868e-05  3.8295e-03 -3.5019e-02\nNG022011 Jega                5.1413e-02 -8.1339e-04  1.0416e-01  1.6182e-01\nNG019007 Jema'a              2.2660e+00 -1.2313e-02  1.5586e+00  1.8249e+00\nNG008013 Jere                1.3567e-01 -1.9868e-05  3.8295e-03  2.1926e+00\nNG021016 Jibia              -1.3819e-01 -8.6620e-05  1.3338e-02 -1.1958e+00\nNG032004 Jos East            1.5263e-01 -1.2235e-04  1.5680e-02  1.2199e+00\nNG032005 Jos North          -1.3166e-01 -2.0041e-04  3.8621e-02 -6.6893e-01\nNG032006 Jos South           7.8292e-01 -1.7723e-03  2.7245e-01  1.5033e+00\nNG023010 Kabba/Bunu         -4.1586e-02 -1.2162e-05  1.5588e-03 -1.0530e+00\nNG020020 Kabo                3.3748e-01 -1.4014e-03  1.5353e-01  8.6487e-01\nNG019008 Kachia              3.6773e-01 -1.4607e-03  1.6002e-01  9.2290e-01\nNG019009 Kaduna North        7.0376e-01 -7.5901e-04  1.9517e-01  1.5947e+00\nNG019010 Kaduna South       -1.3855e+00 -1.1259e-03  2.8941e-01 -2.5733e+00\nNG018015 Kafin Hausa        -1.3986e-01 -1.5504e-03  1.9839e-01 -3.1053e-01\nNG021017 Kafur               1.0373e-01 -2.5910e-04  3.3198e-02  5.7075e-01\nNG008014 Kaga                1.2280e+00 -1.6277e-03  2.5025e-01  2.4579e+00\nNG019011 Kagarko             6.9862e-01 -7.0234e-03  7.6514e-01  8.0671e-01\nNG024011 Kaiama              1.6859e-01 -1.5358e-03  1.9653e-01  3.8375e-01\nNG021018 Kaita               3.2156e-01 -3.2090e-03  4.0996e-01  5.0722e-01\nNG031019 Kajola             -8.3787e-02 -1.6903e-04  4.3490e-02 -4.0097e-01\nNG019012 Kajuru             -9.5898e-01 -9.3914e-04  7.9854e-02 -3.3903e+00\nNG008015 Kala/Balge          1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00\nNG022012 Kalgo               2.6952e-01 -8.1339e-04  1.2516e-01  7.6413e-01\nNG016007 Kaltungo            2.4358e+00 -1.4607e-03  2.2462e-01  5.1426e+00\nNG032007 Kanam               3.0479e-01 -1.0497e-03  1.1505e-01  9.0170e-01\nNG021019 Kankara             1.1181e-01 -2.9126e-04  3.1946e-02  6.2722e-01\nNG032008 Kanke               7.3786e-01 -2.1140e-03  3.2487e-01  1.2983e+00\nNG021020 Kankia              4.7488e-03 -2.9456e-05  3.2316e-03  8.4055e-02\nNG020021 Kano Municipal     -1.8739e-01 -1.2235e-04  1.8840e-02 -1.3644e+00\nNG036010 Karasuwa            2.6079e-01 -7.1640e-04  1.1024e-01  7.8760e-01\nNG020022 Karaye             -4.5621e-02 -3.8586e-05  5.9420e-03 -5.9133e-01\nNG035008 Karim-Lamido        5.2632e-01 -8.6966e-04  6.6469e-02  2.0448e+00\nNG026004 Karu                6.3472e-01 -5.1531e-04  4.3835e-02  3.0341e+00\nNG005012 Katagum            -3.6917e-02 -1.2162e-05  1.3343e-03 -1.0103e+00\nNG027010 Katcha             -2.1227e-01 -6.1632e-04  9.4853e-02 -6.8723e-01\nNG021021 Katsina             2.5970e-01 -3.1865e-04  8.1973e-02  9.0818e-01\nNG007009 Katsina-Ala         2.7703e-01 -1.2235e-04  1.3422e-02  2.3923e+00\nNG018016 Kaugama            -2.6231e-02 -1.0562e-04  1.0125e-02 -2.5965e-01\nNG019013 Kaura               3.8165e-01 -2.8497e-04  5.4911e-02  1.6299e+00\nNG037008 Kaura Namoda        2.5215e-01 -4.8031e-04  9.2535e-02  8.3049e-01\nNG019014 Kauru               2.2014e-01 -1.4475e-04  2.2288e-02  1.4755e+00\nNG018017 Kazaure             1.4889e+00 -4.1483e-03  4.5323e-01  2.2178e+00\nNG026005 Keana              -9.4618e-03 -2.3951e-06  4.6165e-04 -4.4025e-01\nNG034010 Kebbe              -8.3087e-02 -1.4925e-04  1.9126e-02 -5.9971e-01\nNG026006 Keffi              -2.3081e-01 -5.6910e-04  2.1983e-01 -4.9106e-01\nNG033014 Khana               4.3336e-01 -4.8031e-04  4.0859e-02  2.1463e+00\nNG020023 Kibiya              2.9650e-03 -3.3373e-07  6.4326e-05  3.6973e-01\nNG005013 Kirfi              -8.1591e-02 -1.2162e-05  1.8730e-03 -1.8850e+00\nNG018018 Kiri Kasamma        7.6751e-01 -3.2090e-03  4.0996e-01  1.2037e+00\nNG020024 Kiru               -4.4130e-02 -8.3203e-05  9.1276e-03 -4.6103e-01\nNG018019 Kiyawa             -8.1356e-01 -2.3901e-03  3.6719e-01 -1.3387e+00\nNG023011 Kogi               -6.4567e-04 -1.5384e-07  2.3692e-05 -1.3262e-01\nNG022013 Koko/Besse         -1.7906e-02 -3.1000e-03  3.9608e-01 -2.3526e-02\nNG026007 Kokona              2.8901e-02 -5.4386e-06  5.2141e-04  1.2659e+00\nNG006003 Kolokuma/Opokuma    4.1120e-01 -1.5504e-03  3.9834e-01  6.5397e-01\nNG008016 Konduga             1.1281e+00 -1.6277e-03  1.2431e-01  3.2043e+00\nNG007010 Konshisha           1.0935e+00 -1.9394e-03  2.1236e-01  2.3771e+00\nNG027011 Kontagora          -3.9073e-02 -1.0562e-04  2.7175e-02 -2.3638e-01\nNG025013 Kosofe              5.7842e-01 -1.1920e-03  2.2948e-01  1.2099e+00\nNG019015 Kubau              -3.1227e-01 -4.8031e-04  7.3931e-02 -1.1467e+00\nNG019016 Kudan               1.7688e+00 -1.9394e-03  2.4808e-01  3.5552e+00\nNG015005 Kuje                3.2529e-01 -9.8783e-04  1.5197e-01  8.3697e-01\nNG008017 Kukawa              1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00\nNG020025 Kumbotso            2.9856e-01 -9.9952e-04  7.6385e-02  1.0839e+00\nNG020026 Kunchi              6.7138e-02 -7.1640e-04  1.3799e-01  1.8267e-01\nNG020027 Kura               -1.8849e-03 -1.8555e-06  3.5764e-04 -9.9571e-02\nNG021022 Kurfi               1.2681e-01 -6.5588e-04  1.0094e-01  4.0121e-01\nNG035009 Kurmi               7.5819e-01 -1.5358e-03  2.3615e-01  1.5634e+00\nNG021023 Kusada              1.0092e-01 -1.4014e-03  2.6973e-01  1.9701e-01\nNG015006 Kwali               2.6045e-01 -9.2780e-04  2.3853e-01  5.3517e-01\nNG016008 Kwami               2.1905e+00 -2.9930e-03  3.8244e-01  3.5469e+00\nNG007011 Kwande              3.4467e-01 -1.9519e-04  2.5012e-02  2.1806e+00\nNG034011 Kware              -9.2051e-02 -5.1577e-05  4.9446e-03 -1.3083e+00\nNG008018 Kwaya Kusar         1.0582e+00 -1.5504e-03  2.9837e-01  1.9401e+00\nNG026008 Lafia               6.2038e-01 -2.5835e-03  2.4705e-01  1.2534e+00\nNG031020 Lagelu              1.7886e-03 -8.3203e-05  9.1276e-03  1.9592e-02\nNG025014 Lagos Island        8.6984e-01 -8.8063e-04  1.6959e-01  2.1144e+00\nNG025015 Lagos Mainland      1.0537e+00 -1.4749e-03  2.2680e-01  2.2157e+00\nNG002009 Lamurde            -1.5843e-01 -1.6277e-03  2.0827e-01 -3.4359e-01\nNG032009 Langtang North      1.4196e+00 -2.4859e-03  2.7205e-01  2.7264e+00\nNG032010 Langtang South     -1.1870e-02 -3.3373e-07  6.4326e-05 -1.4799e+00\nNG027012 Lapai               8.4157e-02 -2.0041e-04  2.5680e-02  5.2641e-01\nNG035010 Lau                -2.5992e-01 -1.1792e-03  1.1292e-01 -7.6999e-01\nNG027013 Lavun              -1.3204e-01 -5.4275e-05  1.0461e-02 -1.2904e+00\nNG019017 Lere               -2.5568e-01 -9.2780e-04  1.4275e-01 -6.7426e-01\nNG007012 Logo                4.0363e-01 -3.5422e-04  5.4530e-02  1.7300e+00\nNG023012 Lokoja             -2.3647e-01 -6.1632e-04  4.7118e-02 -1.0865e+00\nNG036011 Machina            -2.0137e-01 -1.1259e-03  1.7320e-01 -4.8117e-01\nNG002010 Madagali            1.1675e+00 -1.6277e-03  3.1322e-01  2.0889e+00\nNG020028 Madobi              1.8047e-01 -3.2531e-04  3.1178e-02  1.0239e+00\nNG008019 Mafa                1.0717e+00 -1.6277e-03  2.0827e-01  2.3518e+00\nNG027014 Magama              1.0032e-02 -5.4386e-06  6.9703e-04  3.8020e-01\nNG008020 Magumeri            1.1648e+00 -1.4749e-03  1.6158e-01  2.9014e+00\nNG021024 Mai'adua            1.3145e-01 -4.5316e-03  6.9469e-01  1.6314e-01\nNG008021 Maiduguri           6.3142e-01 -1.3297e-03  5.1324e-01  8.8323e-01\nNG018020 Maigatari           4.2948e-03 -1.5384e-07  2.3692e-05  8.8239e-01\nNG002011 Maiha               1.0689e+00 -1.3297e-03  2.5595e-01  2.1153e+00\nNG022014 Maiyama             2.4269e-01 -1.4475e-04  1.8549e-02  1.7830e+00\nNG020029 Makoda             -1.7618e-01 -1.4749e-03  1.6158e-01 -4.3463e-01\nNG007013 Makurdi            -2.0568e-02 -1.9868e-05  3.8295e-03 -3.3204e-01\nNG018021 Malam Madori       -7.2227e-01 -6.1632e-04  9.4853e-02 -2.3432e+00\nNG021025 Malumfashi          3.5764e-01 -5.6910e-04  8.7591e-02  1.2103e+00\nNG032011 Mangu               1.3249e+00 -3.1000e-03  3.9608e-01  2.1101e+00\nNG021026 Mani                8.6679e-02 -2.2324e-04  2.8605e-02  5.1382e-01\nNG037009 Maradun             1.2453e-01 -1.4925e-04  1.2701e-02  1.1063e+00\nNG027015 Mariga              2.2996e-01 -3.1865e-04  2.7112e-02  1.3986e+00\nNG019018 Markafi            -1.1691e+00 -1.4014e-03  2.6973e-01 -2.2484e+00\nNG008022 Marte               1.2582e+00 -1.6277e-03  3.1322e-01  2.2510e+00\nNG037010 Maru                3.2091e-02 -5.1577e-05  4.3894e-03  4.8516e-01\nNG027016 Mashegu            -2.2500e-02 -2.9456e-05  2.8239e-03 -4.2285e-01\nNG021027 Mashi               4.0696e-01 -2.8497e-04  5.4911e-02  1.7379e+00\nNG021028 Matazu             -4.1196e-02 -3.8586e-05  7.4371e-03 -4.7726e-01\nNG002012 Mayo-Belwa          2.5996e-01 -1.4014e-03  1.1910e-01  7.5733e-01\nNG017011 Mbaitoli            4.1673e-01 -7.6926e-04  6.5421e-02  1.6323e+00\nNG003017 Mbo                 2.4038e-02 -6.9507e-05  1.3396e-02  2.0828e-01\nNG002013 Michika             1.0360e+00 -1.2599e-03  3.2380e-01  1.8228e+00\nNG018022 Miga                5.3008e-02 -1.5504e-03  2.3838e-01  1.1174e-01\nNG032012 Mikang              2.2082e+00 -2.4859e-03  6.3810e-01  2.7674e+00\nNG020030 Minjibir            5.4171e-02 -1.4749e-03  1.6158e-01  1.3843e-01\nNG005014 Misau               1.8292e-02 -1.2162e-05  1.8730e-03  4.2294e-01\nNG003018 Mkpat Enin         -1.6085e-01 -1.1135e-03  1.4256e-01 -4.2306e-01\nNG013015 Moba               -1.7727e-01 -8.6620e-05  1.1101e-02 -1.6817e+00\nNG008023 Mobbar              1.2582e+00 -1.6277e-03  2.5025e-01  2.5184e+00\nNG027017 Mokwa               4.1411e-01 -1.0497e-03  5.6999e-02  1.7389e+00\nNG008024 Monguno             1.2582e+00 -1.6277e-03  2.5025e-01  2.5184e+00\nNG023013 Mopa-Muro           6.8447e-02 -2.5316e-04  6.5130e-02  2.6920e-01\nNG024012 Moro                8.4196e-01 -6.5588e-04  5.5785e-02  3.5675e+00\nNG002014 Mubi North          1.1172e+00 -1.5504e-03  2.9837e-01  2.0482e+00\nNG002015 Mubi South          1.1591e+00 -1.5504e-03  3.9834e-01  1.8389e+00\nNG021029 Musawa              2.3732e-01 -3.9905e-04  3.8242e-02  1.2156e+00\nNG025016 Mushin              1.0431e+00 -1.2599e-03  1.9378e-01  2.3724e+00\nNG027018 Muya               -1.1309e-03 -1.5384e-07  2.9653e-05 -2.0765e-01\nNG016009 Nafada              7.4541e-01 -1.3162e-03  2.5336e-01  1.4835e+00\nNG036012 Nangere             9.0273e-02 -9.3914e-04  1.2025e-01  2.6303e-01\nNG020031 Nasarawa           -6.4231e-02 -5.1577e-05  6.6100e-03 -7.8940e-01\nNG026009 Nasarawa            1.9796e-01 -5.6029e-04  5.3686e-02  8.5677e-01\nNG026010 Nasarawa-Eggon      3.1335e-01 -8.1339e-04  1.5665e-01  7.9377e-01\nNG010011 Ndokwa East        -7.1570e-02 -1.8249e-05  1.7496e-03 -1.7106e+00\nNG010012 Ndokwa West         1.1464e-01 -1.7389e-04  1.9074e-02  8.3134e-01\nNG006004 Nembe               2.8016e-01 -2.0041e-04  3.0857e-02  1.5960e+00\nNG008025 Ngala               1.2582e+00 -1.6277e-03  4.1817e-01  1.9482e+00\nNG008026 Nganzai             1.0897e+00 -1.6277e-03  1.7829e-01  2.5846e+00\nNG022015 Ngaski              5.1373e-02 -1.9519e-04  2.5012e-02  3.2607e-01\nNG017012 Ngor-Okpala         3.8138e-01 -8.2400e-04  7.8934e-02  1.3604e+00\nNG036013 Nguru               1.2072e-02 -6.3380e-06  9.7603e-04  3.8661e-01\nNG005015 Ningi              -9.8898e-02 -5.6910e-04  5.4530e-02 -4.2108e-01\nNG017013 Njaba               7.6469e-01 -1.1259e-03  1.7320e-01  1.8402e+00\nNG004013 Njikoka             6.2583e-01 -7.6926e-04  9.8516e-02  1.9964e+00\nNG014011 Nkanu East          9.3026e-02 -1.5504e-03  1.3174e-01  2.6056e-01\nNG014012 Nkanu West          1.5217e-01 -2.9456e-05  4.5360e-03  2.2598e+00\nNG017014 Nkwerre             5.7646e-01 -5.2377e-04  6.7093e-02  2.2275e+00\nNG004014 Nnewi North         8.8679e-01 -9.3914e-04  2.4144e-01  1.8066e+00\nNG004015 Nnewi South         9.2056e-01 -1.4749e-03  1.4120e-01  2.4538e+00\nNG003019 Nsit Atai           1.1681e-03 -1.0184e-04  1.9627e-02  9.0651e-03\nNG003020 Nsit Ibom           4.3614e-02 -2.2881e-04  4.4093e-02  2.0879e-01\nNG003021 Nsit Ubium         -2.0447e-02 -6.6449e-05  6.3702e-03 -2.5536e-01\nNG014013 Nsukka              6.7234e-01 -9.3914e-04  1.2025e-01  1.9416e+00\nNG002016 Numan               6.2298e-01 -1.6277e-03  3.1322e-01  1.1160e+00\nNG017015 Nwangele            4.9715e-01 -5.6910e-04  8.7591e-02  1.6817e+00\nNG028015 Obafemi-Owode       3.2338e-01 -6.6542e-04  6.3753e-02  1.2834e+00\nNG009013 Obanliku            9.3118e-01 -6.0715e-04  1.5614e-01  2.3581e+00\nNG007014 Obi                 1.4691e-02 -3.8586e-05  7.4371e-03  1.7080e-01\nNG026011 Obi                 1.6951e-01 -4.7222e-04  9.0976e-02  5.6357e-01\nNG001009 Obi Ngwa           -2.4197e-01 -4.9318e-03  4.1767e-01 -3.6678e-01\nNG033015 Obia/Akpor         -6.5236e-02 -5.4386e-06  5.9668e-04 -2.6704e+00\nNG030024 Obokun              8.4506e-01 -1.6916e-03  1.4373e-01  2.2335e+00\nNG003022 Obot Akara          9.9888e-03 -1.8249e-05  2.0021e-03  2.2364e-01\nNG017016 Obowo               1.9787e-01 -2.5910e-04  3.9890e-02  9.9200e-01\nNG009014 Obubra              1.4982e+00 -5.2080e-03  5.6841e-01  1.9941e+00\nNG009015 Obudu               1.3832e+00 -2.3901e-03  3.0559e-01  2.5066e+00\nNG028016 Odeda               3.6842e-02 -1.9868e-05  2.1798e-03  7.8954e-01\nNG029013 Odigbo              4.0670e-01 -7.8598e-03  8.5553e-01  4.4820e-01\nNG030025 Odo-Otin            2.6021e+00 -5.4918e-03  5.9920e-01  3.3686e+00\nNG028017 Odogbolu            8.4874e-03 -3.6124e-04  3.4620e-02  4.7556e-02\nNG009016 Odukpani            1.1578e-01 -2.2962e-03  1.5911e-01  2.9601e-01\nNG024013 Offa                6.6227e+00 -3.9022e-03  3.0085e+00  3.8204e+00\nNG023014 Ofu                 2.7372e-02 -3.2531e-04  3.5679e-02  1.4664e-01\nNG033016 Ogba/Egbema/Ndoni   3.2130e-01 -8.2400e-04  7.0072e-02  1.2169e+00\nNG007015 Ogbadibo            1.1029e-01 -4.0925e-05  6.3021e-03  1.3899e+00\nNG004016 Ogbaru              5.2719e-01 -8.2400e-04  6.2983e-02  2.1040e+00\nNG006005 Ogbia               4.2386e-01 -4.8031e-04  7.3931e-02  1.5606e+00\nNG031021 Ogbomosho North    -2.0503e-01 -1.7389e-04  4.4739e-02 -9.6850e-01\nNG031022 Ogbomosho South     2.0166e-01 -2.5316e-04  4.8784e-02  9.1416e-01\nNG031023 Ogo Oluwa           7.3130e-01 -1.1792e-03  1.8138e-01  1.7199e+00\nNG009017 Ogoja               2.0417e+00 -2.2042e-03  3.3869e-01  3.5121e+00\nNG023015 Ogori/Magongo       7.1880e-03 -2.5910e-04  1.0011e-01  2.3536e-02\nNG033017 Ogu/Bolo            1.2340e+00 -1.6277e-03  2.5025e-01  2.4700e+00\nNG028018 Ogun waterside     -1.4659e-01 -1.4925e-04  2.2981e-02 -9.6603e-01\nNG017017 Oguta              -2.9739e-01 -3.1865e-04  3.0540e-02 -1.6999e+00\nNG001010 Ohafia              2.2340e-01 -4.8031e-04  9.2535e-02  7.3597e-01\nNG017018 Ohaji/Egbema       -1.7016e-01 -8.3203e-05  9.1276e-03 -1.7802e+00\nNG011011 Ohaozara           -8.4012e-02 -8.1339e-04  1.0416e-01 -2.5779e-01\nNG011012 Ohaukwu             5.0585e-01 -1.6916e-03  3.2550e-01  8.8961e-01\nNG007016 Ohimini             2.9012e-02 -1.2162e-05  2.3443e-03  5.9946e-01\nNG014014 Oji-River           6.6482e-01 -7.6926e-04  7.3694e-02  2.4518e+00\nNG025017 Ojo                -2.8194e-01 -8.6620e-05  1.6694e-02 -2.1814e+00\nNG007017 Oju                -1.6483e-01 -1.2649e-04  1.3876e-02 -1.3982e+00\nNG024014 Oke-Ero             3.8743e+00 -6.0818e-03  6.6319e-01  4.7649e+00\nNG023016 Okehi              -4.3259e-02 -1.4475e-04  2.2288e-02 -2.8879e-01\nNG023017 Okene              -5.7052e-02 -5.1577e-05  7.9423e-03 -6.3959e-01\nNG017019 Okigwe              3.6430e-01 -2.9126e-04  2.7916e-02  2.1821e+00\nNG029014 Okitipupa           1.6093e-01 -1.2235e-04  1.8840e-02  1.1733e+00\nNG003023 Okobo               3.1158e-02 -3.8586e-05  4.2332e-03  4.7948e-01\nNG010013 Okpe                4.8875e-01 -1.1920e-03  1.3062e-01  1.3556e+00\nNG007018 Okpokwu             6.1094e-02 -1.0562e-04  1.3535e-02  5.2604e-01\nNG033018 Okrika              1.1394e+00 -1.5504e-03  2.3838e-01  2.3368e+00\nNG030026 Ola-oluwa          -4.7970e-01 -7.1640e-04  1.3799e-01 -1.2895e+00\nNG023018 Olamabolo           2.9334e-01 -6.6542e-04  7.2956e-02  1.0885e+00\nNG030027 Olorunda            5.8173e-01 -5.6029e-04  5.3686e-02  2.5131e+00\nNG031024 Olorunsogo         -4.9347e-02 -1.0562e-04  1.1586e-02 -4.5747e-01\nNG031025 Oluyole             2.4317e-01 -5.6910e-04  5.4530e-02  1.0438e+00\nNG023019 Omala              -9.3535e-02 -8.6620e-05  1.1101e-02 -8.8695e-01\nNG033019 Omumma              3.8428e-01 -1.1920e-03  2.2948e-01  8.0468e-01\nNG031026 Ona-Ara            -1.3621e-01 -2.8497e-04  3.6512e-02 -7.1136e-01\nNG029015 Ondo East           1.5652e+00 -1.9394e-03  2.9809e-01  2.8704e+00\nNG029016 Ondo West           1.4039e+00 -3.9022e-03  4.2644e-01  2.1558e+00\nNG011013 Onicha              7.3697e-01 -3.1000e-03  2.9629e-01  1.3596e+00\nNG004017 Onitsha North       8.5261e-01 -1.5504e-03  1.6983e-01  2.0727e+00\nNG004018 Onitsha South       9.5775e-01 -1.4749e-03  3.7898e-01  1.5582e+00\nNG003024 Onna                2.2091e-02 -2.9456e-05  3.7751e-03  3.6003e-01\nNG033020 Opobo/Nkoro         5.4810e-01 -1.2599e-03  2.4254e-01  1.1155e+00\nNG012012 Oredo               7.8103e-02 -1.2649e-04  3.2546e-02  4.3363e-01\nNG031027 Orelope             8.6743e-03 -6.3380e-06  9.7603e-04  2.7786e-01\nNG012013 Orhionmwon         -3.8818e-01 -6.0715e-04  3.8579e-02 -1.9732e+00\nNG031028 Ori Ire            -2.3074e-02 -1.9868e-05  1.9048e-03 -5.2823e-01\nNG030028 Oriade              1.3380e+00 -3.2090e-03  2.4469e-01  2.7115e+00\nNG017020 Orlu                6.6415e-01 -7.1640e-04  9.1751e-02  2.1950e+00\nNG030029 Orolu               3.8157e-01 -6.0715e-04  1.1696e-01  1.1175e+00\nNG003025 Oron               -2.9816e-01 -1.0618e-03  1.6334e-01 -7.3512e-01\nNG017021 Orsu                7.5463e-01 -1.1259e-03  1.7320e-01  1.8160e+00\nNG017022 Oru East            5.1528e-01 -9.9952e-04  1.0955e-01  1.5598e+00\nNG017023 Oru West            2.1165e-01 -9.9952e-04  2.5695e-01  4.1950e-01\nNG003026 Oruk Anam          -2.0130e-02 -5.1577e-05  5.6583e-03 -2.6692e-01\nNG004019 Orumba North        5.9947e-01 -6.6542e-04  1.0240e-01  1.8754e+00\nNG004020 Orumba South        6.4364e-01 -8.8063e-04  1.1277e-01  1.9193e+00\nNG029017 Ose                 1.3031e+00 -3.7819e-03  4.1335e-01  2.0327e+00\nNG010014 Oshimili North      7.9825e-01 -1.2599e-03  1.9378e-01  1.8163e+00\nNG010015 Oshimili South      6.2773e-01 -8.2400e-04  9.0329e-02  2.0914e+00\nNG025018 Oshodi-Isolo        6.9558e-01 -1.6277e-03  2.5025e-01  1.3937e+00\nNG001011 Osisioma Ngwa       8.0750e-03 -5.2377e-04  5.0189e-02  3.8383e-02\nNG030030 Osogbo              4.6860e-01 -5.6029e-04  6.1436e-02  1.8928e+00\nNG007019 Oturkpo             1.1250e-02 -4.0925e-05  3.9234e-03  1.8026e-01\nNG012014 Ovia North East    -2.9406e-02 -6.9507e-05  5.3168e-03 -4.0233e-01\nNG012015 Ovia South West    -1.4238e-01 -8.6620e-05  1.1101e-02 -1.3506e+00\nNG012016 Owan East          -7.3679e-03 -1.4925e-04  2.2981e-02 -4.7618e-02\nNG012017 Owan West          -5.5478e-03 -5.4275e-05  8.3578e-03 -6.0090e-02\nNG017026 Owerri-Municipal    4.7785e-01 -1.4749e-03  5.6921e-01  6.3532e-01\nNG017024 Owerri North        2.2707e-01 -1.2649e-04  1.6210e-02  1.7845e+00\nNG017025 Owerri West         2.1351e-01 -4.3874e-04  5.6206e-02  9.0244e-01\nNG029018 Owo                 5.7511e-01 -2.3901e-03  2.6159e-01  1.1291e+00\nNG013016 Oye                 1.6371e-01 -8.6966e-04  1.3381e-01  4.4992e-01\nNG004021 Oyi                 3.1633e-01 -1.7389e-04  2.6774e-02  1.9343e+00\nNG033021 Oyigbo              3.4468e-01 -1.4749e-03  1.4120e-01  9.2121e-01\nNG031029 Oyo East           -6.3373e-02 -1.2649e-04  1.0764e-02 -6.0960e-01\nNG031030 Oyo West            1.7885e-01 -8.2400e-04  9.0329e-02  5.9781e-01\nNG024015 Oyun                8.3120e+00 -1.8811e-02  2.0249e+00  5.8544e+00\nNG027019 Paikoro            -2.0520e-03 -3.3373e-07  2.8403e-05 -3.8497e-01\nNG032013 Pankshin            1.9527e+00 -3.2090e-03  3.5093e-01  3.3016e+00\nNG010016 Patani              5.2612e-01 -9.9952e-04  1.5377e-01  1.3442e+00\nNG024016 Pategi              1.1201e+00 -4.7965e-03  6.1179e-01  1.4382e+00\nNG033022 Port-Harcourt       6.2063e-01 -7.6926e-04  1.4816e-01  1.6144e+00\nNG036014 Potiskum            7.9197e-01 -1.1920e-03  3.0637e-01  1.4330e+00\nNG032014 Qua'an Pan          2.0377e+00 -4.2742e-03  5.4546e-01  2.7648e+00\nNG034012 Rabah               4.4925e-01 -1.2599e-03  1.3805e-01  1.2125e+00\nNG027020 Rafi               -8.4046e-03 -3.3373e-07  5.1394e-05 -1.1723e+00\nNG020032 Rano                2.6986e-02 -3.2531e-04  5.0081e-02  1.2204e-01\nNG028019 Remo North          3.6799e-01 -4.8031e-04  7.3931e-02  1.3552e+00\nNG027021 Rijau               1.7095e-01 -1.1135e-03  1.2203e-01  4.9256e-01\nNG021030 Rimi               -8.3028e-02 -2.9456e-05  4.5360e-03 -1.2324e+00\nNG020033 Rimin Gado          6.5987e-01 -1.2599e-03  1.9378e-01  1.5019e+00\nNG018023 Ringim              3.8028e-02 -1.2599e-03  1.6127e-01  9.7831e-02\nNG032015 Riyom               1.5301e+00 -3.4325e-03  3.7530e-01  2.5032e+00\nNG020034 Rogo               -1.1049e-01 -8.1339e-04  8.9166e-02 -3.6728e-01\nNG018024 Roni               -5.1784e-03 -1.2468e-03  1.9176e-01 -8.9783e-03\nNG019019 Sabon-Gari          9.0495e+00 -1.7248e-02  3.2672e+00  5.0161e+00\nNG034013 Sabon Birni        -1.2167e-01 -5.1577e-05  1.3272e-02 -1.0557e+00\nNG021031 Sabuwa             -3.2913e-01 -6.9507e-05  1.3396e-02 -2.8430e+00\nNG021032 Safana             -2.2388e-02 -3.6124e-04  4.6281e-02 -1.0239e-01\nNG006006 Sagbama            -4.2228e-02 -5.4386e-06  4.6287e-04 -1.9625e+00\nNG022016 Sakaba              3.1197e-01 -7.0651e-04  1.3608e-01  8.4761e-01\nNG031031 Saki East          -1.6296e-03 -2.3951e-06  3.6884e-04 -8.4725e-02\nNG031032 Saki West           2.3715e-02 -5.1577e-05  1.3272e-02  2.0631e-01\nNG021033 Sandamu             1.3349e-02 -1.8555e-06  2.3780e-04  8.6577e-01\nNG019020 Sanga               8.4485e-01 -1.0497e-03  1.0054e-01  2.6678e+00\nNG010017 Sapele              5.7035e-01 -1.0618e-03  2.0444e-01  1.2638e+00\nNG035011 Sardauna           -3.1543e-01 -1.7389e-04  6.7196e-02 -1.2162e+00\nNG028020 Shagamu            -1.1518e-01 -3.9167e-04  5.0179e-02 -5.1242e-01\nNG034014 Shagari            -9.6663e-02 -5.6910e-04  8.7591e-02 -3.2469e-01\nNG022017 Shanga              8.0602e-02 -9.2780e-04  8.8869e-02  2.7349e-01\nNG008027 Shani               1.3145e-01 -1.6277e-03  1.5580e-01  3.3715e-01\nNG020035 Shanono             2.2983e-01 -3.2531e-04  5.0081e-02  1.0284e+00\nNG002017 Shelleng            9.9270e-01 -1.3297e-03  1.4569e-01  2.6043e+00\nNG032016 Shendam             1.4623e+00 -4.2742e-03  4.6692e-01  2.1463e+00\nNG037011 Shinkafi            2.6920e-02 -6.3380e-06  1.6310e-03  6.6675e-01\nNG005016 Shira              -5.8645e-02 -6.6449e-05  1.0232e-02 -5.7910e-01\nNG027022 Shiroro            -8.5911e-02 -2.5910e-04  2.8419e-02 -5.0808e-01\nNG016010 Shomgom             1.9560e+00 -4.6631e-03  7.1476e-01  2.3191e+00\nNG025019 Shomolu             1.0692e+00 -1.4014e-03  2.6973e-01  2.0614e+00\nNG034015 Silame             -6.5842e-02 -6.6542e-04  1.2817e-01 -1.8205e-01\nNG019021 Soba                3.6742e+00 -1.2747e-02  1.2065e+00  3.3566e+00\nNG034016 Sokoto North        2.9738e-01 -1.4014e-03  3.6011e-01  4.9790e-01\nNG034017 Sokoto South        3.0015e-01 -1.1920e-03  2.2948e-01  6.2907e-01\nNG002018 Song                9.3505e-01 -1.1259e-03  1.2339e-01  2.6651e+00\nNG006007 Southern Ijaw       2.5622e-01 -2.9126e-04  3.1946e-02  1.4352e+00\nNG018025 Sule-Tankarkar      8.9191e-01 -5.1531e-04  6.6011e-02  3.4735e+00\nNG027023 Suleja              6.1243e-02 -8.2400e-04  1.5869e-01  1.5580e-01\nNG020036 Sumaila             1.6924e-01 -8.6966e-04  1.6748e-01  4.1567e-01\nNG022018 Suru                1.4857e-01 -2.7477e-05  4.2313e-03  2.2845e+00\nNG025020 Surulere            1.0077e+00 -1.1920e-03  1.5259e-01  2.5827e+00\nNG031033 Surulere            1.3377e+00 -2.3901e-03  1.6560e-01  3.2931e+00\nNG027024 Tafa               -4.2032e-01 -1.0618e-03  1.6334e-01 -1.0374e+00\nNG005017 Tafawa-Balewa      -2.0376e-01 -3.9905e-04  3.0514e-02 -1.1641e+00\nNG033023 Tai                 1.0710e+00 -1.4749e-03  2.2680e-01  2.2520e+00\nNG020037 Takai              -1.3067e-01 -2.5835e-03  3.3026e-01 -2.2289e-01\nNG035012 Takum               7.9880e-01 -1.6916e-03  3.2550e-01  1.4031e+00\nNG037012 Talata Mafara      -3.1578e-01 -7.0651e-04  1.3608e-01 -8.5411e-01\nNG034018 Tambuwal            2.4912e-02 -5.1577e-05  4.3894e-03  3.7679e-01\nNG034019 Tangaza            -3.4236e-03 -3.3373e-07  4.2772e-05 -5.2343e-01\nNG020038 Tarauni             3.3251e-01 -1.1920e-03  2.2948e-01  6.9661e-01\nNG007020 Tarka               1.9596e-01 -8.3203e-05  1.6036e-02  1.5482e+00\nNG036015 Tarmua              8.8341e-01 -1.2599e-03  1.9378e-01  2.0097e+00\nNG018026 Taura              -2.1826e-01 -9.8783e-04  1.2648e-01 -6.1094e-01\nNG020039 Tofa                7.3790e-01 -1.5504e-03  2.3838e-01  1.5145e+00\nNG005018 Toro                6.4220e-02 -1.7389e-04  1.3300e-02  5.5837e-01\nNG026012 Toto                6.0549e-02 -1.8249e-05  2.3389e-03  1.2524e+00\nNG002019 Toungo             -2.7763e-01 -1.5504e-03  3.9834e-01 -4.3743e-01\nNG037013 Tsafe              -8.4724e-03 -5.4386e-06  1.0483e-03 -2.6151e-01\nNG020040 Tsanyawa           -3.6620e-03 -1.5384e-07  1.6879e-05 -8.9133e-01\nNG020041 Tudun Wada         -2.3849e-01 -1.0497e-03  8.9248e-02 -7.9480e-01\nNG034020 Tureta             -3.3298e-01 -6.0715e-04  6.6571e-02 -1.2882e+00\nNG014015 Udenu               6.7295e-01 -1.5504e-03  2.3838e-01  1.3815e+00\nNG014016 Udi                 7.3616e-01 -9.3914e-04  7.9854e-02  2.6084e+00\nNG010018 Udu                 7.6129e-01 -1.3297e-03  2.5595e-01  1.5074e+00\nNG003027 Udung Uko          -4.2922e-03 -1.5384e-07  3.9589e-05 -6.8215e-01\nNG010019 Ughelli North       3.2251e-01 -5.2377e-04  4.0046e-02  1.6142e+00\nNG010020 Ughelli South       6.8852e-01 -7.1640e-04  7.8541e-02  2.4593e+00\nNG001012 Ugwunagbo           8.3329e-02 -1.4475e-04  1.8549e-02  6.1289e-01\nNG012018 Uhunmwonde          5.3675e-02 -1.7389e-04  2.2283e-02  3.6074e-01\nNG003028 Ukanafun            4.8583e-02 -5.4275e-05  8.3578e-03  5.3201e-01\nNG007021 Ukum                7.1148e-01 -9.2780e-04  1.7867e-01  1.6854e+00\nNG001013 Ukwa East           1.1053e-01 -3.5422e-04  3.8849e-02  5.6258e-01\nNG001014 Ukwa West          -3.1866e-01 -6.5588e-04  8.4006e-02 -1.0972e+00\nNG010021 Ukwuani             1.1424e-02 -2.3951e-06  4.6165e-04  5.3181e-01\nNG001017 Umu-Nneochi         5.7671e-01 -7.1640e-04  7.8541e-02  2.0604e+00\nNG001015 Umuahia North       2.7894e-01 -5.6910e-04  6.2402e-02  1.1189e+00\nNG001016 Umuahia South       6.0619e-03 -3.3373e-07  5.1394e-05  8.4562e-01\nNG020042 Ungogo              3.0813e-01 -7.6926e-04  6.5421e-02  1.2077e+00\nNG017027 Unuimo              6.7941e-01 -1.4749e-03  1.6158e-01  1.6939e+00\nNG003029 Uruan              -1.1686e-02 -2.3951e-06  3.0697e-04 -6.6684e-01\nNG003030 Urue-Offong/Oruko   4.6362e-03 -2.3951e-06  3.6884e-04  2.4153e-01\nNG007022 Ushongo             9.6682e-01 -2.9930e-03  3.8244e-01  1.5682e+00\nNG035013 Ussa                1.0961e+00 -1.2468e-03  3.2043e-01  1.9386e+00\nNG010022 Uvwie               6.7907e-01 -1.0618e-03  1.6334e-01  1.6828e+00\nNG003031 Uyo                -7.6637e-03 -1.0903e-05  8.3406e-04 -2.6499e-01\nNG014017 Uzo-Uwani           7.8882e-01 -1.5504e-03  1.4841e-01  2.0517e+00\nNG007023 Vandeikya           3.4338e-01 -1.2235e-04  1.8840e-02  2.5026e+00\nNG034021 Wamako              2.0732e-02 -1.2162e-05  1.0351e-03  6.4477e-01\nNG026013 Wamba               4.6167e-02 -5.4386e-06  8.3753e-04  1.5955e+00\nNG020043 Warawa             -2.1810e-04 -1.4475e-04  1.5879e-02 -5.8210e-04\nNG005019 Warji               1.3116e-01 -4.0925e-05  7.8878e-03  1.4773e+00\nNG010023 Warri North         1.9287e-01 -3.2531e-04  2.7678e-02  1.1612e+00\nNG010024 Warri South         3.4420e-01 -2.0041e-04  2.5680e-02  2.1491e+00\nNG010025 Warri South West    7.0914e-01 -1.1920e-03  1.8334e-01  1.6589e+00\nNG022019 Wasagu/Danko       -7.6487e-02 -5.6029e-04  6.1436e-02 -3.0633e-01\nNG032017 Wase                1.1859e-01 -6.6449e-05  1.0232e-02  1.1731e+00\nNG020044 Wudil              -8.0353e-03 -1.9868e-05  2.1798e-03 -1.7168e-01\nNG035014 Wukari              8.4291e-01 -2.5835e-03  2.8271e-01  1.5902e+00\nNG034022 Wurno               1.2249e-01 -3.6124e-04  6.9603e-02  4.6565e-01\nNG027025 Wushishi            6.0254e-02 -6.0715e-04  6.6571e-02  2.3588e-01\nNG034023 Yabo               -6.1064e-02 -8.3203e-05  1.0663e-02 -5.9055e-01\nNG023020 Yagba East          5.4543e-03 -1.5384e-07  1.6879e-05  1.3276e+00\nNG023021 Yagba West          2.2042e+00 -1.2468e-03  1.3661e-01  5.9669e+00\nNG009018 Yakurr              1.4624e+00 -6.3882e-03  9.7748e-01  1.4856e+00\nNG009019 Yala                1.4254e+00 -4.4019e-03  4.2017e-01  2.2058e+00\nNG016011 Yamaltu/Deba        1.7873e+00 -6.7020e-03  7.3036e-01  2.0992e+00\nNG018027 Yankwashi          -1.1477e-01 -2.9456e-05  4.5360e-03 -1.7036e+00\nNG022020 Yauri              -3.4257e-01 -7.1640e-04  1.8422e-01 -7.9648e-01\nNG006008 Yenegoa             4.8213e-01 -6.6542e-04  8.5226e-02  1.6538e+00\nNG002020 Yola North          1.0412e+00 -1.4014e-03  5.4087e-01  1.4176e+00\nNG002021 Yola South          9.9111e-01 -1.1259e-03  1.7320e-01  2.3842e+00\nNG035015 Yorro               9.1919e-02 -5.1577e-05  6.6100e-03  1.1312e+00\nNG036016 Yunusari            1.0843e+00 -1.6277e-03  3.1322e-01  1.9403e+00\nNG036017 Yusufari            6.9180e-01 -1.2599e-03  1.9378e-01  1.5744e+00\nNG005020 Zaki                8.1963e-02 -1.0184e-04  1.1172e-02  7.7642e-01\nNG021034 Zango              -5.1902e-01 -3.9905e-04  7.6885e-02 -1.8704e+00\nNG019022 Zango-Kataf        -5.5710e-01 -4.8031e-04  6.1529e-02 -2.2440e+00\nNG019023 Zaria               1.0395e+01 -1.1260e-02  2.1459e+00  7.1035e+00\nNG035016 Zing               -2.5409e-01 -4.7222e-04  1.8243e-01 -5.9380e-01\nNG037014 Zurmi              -2.3990e-02 -5.4386e-06  5.2141e-04 -1.0504e+00\nNG022021 Zuru               -1.4493e-01 -2.0041e-04  3.8621e-02 -7.3644e-01\n                            Pr.z....E.Ii..\nNG001001 Aba North                  0.4620\nNG001002 Aba South                  0.4949\nNG008001 Abadam                     0.0514\nNG015001 Abaji                      0.6471\nNG003001 Abak                       0.9510\nNG011001 Abakaliki                  0.0615\nNG028001 Abeokuta North             0.4153\nNG028002 Abeokuta South             0.2433\nNG009001 Abi                        0.0172\nNG017001 Aboh-Mbaise                0.2263\nNG033001 Abua/Odual                 0.0200\nNG015002 Abuja Municipal            0.6488\nNG023001 Adavi                      0.8370\nNG007001 Ado                        0.5518\nNG028003 Ado-Odo/Ota                0.7717\nNG013001 Ado Ekiti                  0.8540\nNG031001 Afijio                     0.7341\nNG011002 Afikpo North               0.1672\nNG011003 Afikpo South               0.9353\nNG027001 Agaie                      0.6905\nNG007002 Agatu                      0.6821\nNG025001 Agege                      0.6186\nNG004001 Aguata                     0.0499\nNG027002 Agwara                     0.9823\nNG017002 Ahiazu-Mbaise              0.1762\nNG033002 Ahoada East                0.0594\nNG033003 Ahoada West                0.0922\nNG030001 Aiyedade                   0.9930\nNG030002 Aiyedire                   0.0484\nNG013002 Aiyekire (Gbonyin)         0.1445\nNG023002 Ajaokuta                   0.7439\nNG025002 Ajeromi-Ifelodun           0.0837\nNG020001 Ajingi                     0.1104\nNG009002 Akamkpa                    0.0000\nNG031002 Akinyele                   0.3791\nNG016001 Akko                       0.0043\nNG012001 Akoko-Edo                  0.1587\nNG029001 Akoko North East           0.0010\nNG029002 Akoko North West           0.2746\nNG029003 Akoko South East           0.0006\nNG029004 Akoko South West           0.0044\nNG009003 Akpabuyo                   0.5320\nNG033004 Akuku Toru                 0.1960\nNG029005 Akure North                0.5562\nNG029006 Akure South                0.4350\nNG026001 Akwanga                    0.3612\nNG020002 Albasu                     0.4635\nNG022001 Aleiro                     0.4053\nNG025003 Alimosho                   0.4080\nNG005001 Alkaleri                   0.0047\nNG025004 Amuwo-Odofin               0.0442\nNG004002 Anambra East               0.0624\nNG004003 Anambra West               0.0263\nNG004004 Anaocha                    0.0139\nNG033005 Andoni                     0.1158\nNG014001 Aninri                     0.2396\nNG010001 Aniocha North              0.0631\nNG010002 Aniocha South              0.0590\nNG037001 Anka                       0.9146\nNG023003 Ankpa                      0.5866\nNG007003 Apa                        0.7342\nNG025005 Apapa                      0.0142\nNG035001 Ardo-Kola                  0.0325\nNG022002 Arewa-Dandi                0.1860\nNG022003 Argungu                    0.8548\nNG001003 Arochukwu                  0.8094\nNG024001 Asa                        0.0000\nNG033006 Asari-Toru                 0.1304\nNG008002 Askira/Uba                 0.0021\nNG030003 Atakumosa East             0.0092\nNG030004 Atakumosa West             0.0124\nNG031003 Atiba                      0.4387\nNG031004 Atigbo                     0.7198\nNG022004 Augie                      0.8052\nNG018001 Auyo                       0.9508\nNG026002 Awe                        0.0121\nNG014002 Awgu                       0.0522\nNG004005 Awka North                 0.0454\nNG004006 Awka South                 0.0640\nNG004007 Ayamelum                   0.0473\nNG018002 Babura                     0.0036\nNG025006 Badagry                    0.2209\nNG036001 Bade                       0.1329\nNG022005 Bagudo                     0.0663\nNG020003 Bagwai                     0.1081\nNG009005 Bakassi                       NaN\nNG021001 Bakori                     0.4822\nNG037002 Bakura                     0.7251\nNG016002 Balanga                    0.2529\nNG035002 Bali                       0.4417\nNG008003 Bama                       0.0244\nNG032001 Barikin Ladi               0.0142\nNG024002 Baruten                    0.7956\nNG023004 Bassa                      0.9804\nNG032002 Bassa                      0.4047\nNG021002 Batagarawa                 0.2788\nNG021003 Batsari                    0.9125\nNG005002 Bauchi                     0.3215\nNG021004 Baure                      0.0463\nNG008004 Bayo                       0.3329\nNG020004 Bebeji                     0.9344\nNG009006 Bekwara                    0.0067\nNG001004 Bende                      0.1097\nNG009007 Biase                      0.2263\nNG020005 Bichi                      0.2063\nNG027003 Bida                       0.2097\nNG016003 Billiri                    0.0017\nNG021005 Bindawa                    0.6002\nNG034001 Binji                      0.4634\nNG018003 Biriniwa                   0.6828\nNG018004 Birni Kudu                 0.9999\nNG019001 Birnin-Gwari               0.0238\nNG022006 Birnin Kebbi               0.1668\nNG037003 Birnin Magaji              0.2093\nNG008005 Biu                        0.0050\nNG034002 Bodinga                    0.9524\nNG005003 Bogoro                     0.3486\nNG009008 Boki                       0.0103\nNG032003 Bokkos                     0.0027\nNG030005 Boluwaduro                 0.0117\nNG010003 Bomadi                     0.1866\nNG033007 Bonny                      0.0171\nNG027004 Borgu                      0.2807\nNG030006 Boripe                     0.0193\nNG027005 Bosso                      0.8830\nNG006001 Brass                      0.5384\nNG018005 Buji                       0.5299\nNG037004 Bukkuyum                   0.8760\nNG037005 Bungudu                    0.5450\nNG020006 Bunkure                    0.7569\nNG022007 Bunza                      0.1592\nNG036002 Bursari                    0.0320\nNG007004 Buruku                     0.1054\nNG010004 Burutu                     0.1216\nNG015003 Bwari                      0.1459\nNG009010 Calabar-Municipal          0.0201\nNG009009 Calabar South              0.2061\nNG027006 Chanchaga                  0.7342\nNG021006 Charanchi                  0.4974\nNG008006 Chibok                     0.0661\nNG019002 Chikun                     0.0076\nNG020007 Dala                       0.3222\nNG036003 Damaturu                   0.0276\nNG005004 Damban                     0.7201\nNG020008 Dambatta                   0.1073\nNG008007 Damboa                     0.0023\nNG021007 Dan Musa                   0.5703\nNG022008 Dandi                      0.5424\nNG021008 Dandume                    0.1743\nNG034003 Dange-Shuni                0.4598\nNG021009 Danja                      0.1954\nNG005005 Darazo                     0.8792\nNG005006 Dass                       0.5137\nNG021010 Daura                      0.3800\nNG020009 Dawakin Kudu               0.5554\nNG020010 Dawakin Tofa               0.1454\nNG033008 Degema                     0.0170\nNG023005 Dekina                     0.9594\nNG002001 Demsa                      0.0500\nNG008008 Dikwa                      0.0058\nNG020011 Doguwa                     0.8206\nNG026003 Doma                       0.3497\nNG035003 Donga                      0.0023\nNG016004 Dukku                      0.0059\nNG004008 Dunukofia                  0.0714\nNG018006 Dutse                      0.5537\nNG021011 Dutsi                      0.1748\nNG021012 Dutsin-Ma                  0.8306\nNG003002 Eastern Obolo              0.5773\nNG011004 Ebonyi                     0.6318\nNG027007 Edati                      0.6209\nNG030007 Ede North                  0.6486\nNG030008 Ede South                  0.0004\nNG024003 Edu                        0.0000\nNG013003 Efon                       0.0165\nNG028004 Egbado North               0.0643\nNG028005 Egbado South               0.9156\nNG031005 Egbeda                     0.5785\nNG030009 Egbedore                   0.0333\nNG012002 Egor                       0.6987\nNG017003 Ehime-Mbano                0.2311\nNG030010 Ejigbo                     0.4873\nNG006002 Ekeremor                   0.2120\nNG003003 Eket                       0.8773\nNG024004 Ekiti                      0.1059\nNG013004 Ekiti East                 0.0185\nNG013005 Ekiti South West           0.0930\nNG013006 Ekiti West                 0.0819\nNG004009 Ekwusigo                   0.0675\nNG033009 Eleme                      0.0379\nNG033010 Emohua                     0.0657\nNG013007 Emure                      0.0061\nNG014003 Enugu East                 0.0877\nNG014004 Enugu North                0.0588\nNG014005 Enugu South                0.2243\nNG025007 Epe                        0.3713\nNG012003 Esan Central               0.2892\nNG012004 Esan North East            0.2814\nNG012005 Esan South East            0.1107\nNG012006 Esan West                  0.3271\nNG029007 Ese-Odo                    0.7369\nNG003004 Esit - Eket                0.6955\nNG003005 Essien Udim                0.7066\nNG033011 Etche                      0.2761\nNG010005 Ethiope East               0.6314\nNG010006 Ethiope West               0.4171\nNG025008 Eti-Osa                    0.4737\nNG003006 Etim Ekpo                  0.9944\nNG003007 Etinan                     0.7632\nNG012007 Etsako Central             0.2457\nNG012008 Etsako East                0.3589\nNG012009 Etsako West                0.2222\nNG009011 Etung                      0.0335\nNG028006 Ewekoro                    0.0937\nNG014006 Ezeagu                     0.0458\nNG017004 Ezinihitte                 0.5446\nNG011005 Ezza North                 0.0779\nNG011006 Ezza South                 0.0999\nNG020012 Fagge                      0.6790\nNG022009 Fakai                      0.3085\nNG021013 Faskari                    0.9418\nNG036004 Fika                       0.6015\nNG002002 Fufore                     0.0134\nNG016005 Funakaye                   0.2732\nNG036005 Fune                       0.0067\nNG021014 Funtua                     0.2050\nNG020013 Gabasawa                   0.7644\nNG034004 Gada                       0.6316\nNG018007 Gagarawa                   0.0319\nNG005007 Gamawa                     0.5144\nNG005008 Ganjuwa                    0.9231\nNG002003 Ganye                      0.3009\nNG018008 Garki                      0.5353\nNG020014 Garko                      0.0865\nNG020015 Garum Mallam               0.3339\nNG035004 Gashaka                    0.7080\nNG035005 Gassol                     0.0545\nNG020016 Gaya                       0.7931\nNG027008 Gbako                      0.9111\nNG007005 Gboko                      0.0332\nNG036006 Geidam                     0.0130\nNG020017 Gezawa                     0.3001\nNG005009 Giade                      0.7011\nNG002005 Girei                      0.0228\nNG019003 Giwa                       0.0000\nNG033012 Gokana                     0.0492\nNG016006 Gombe                      0.0003\nNG002004 Gombi                      0.0119\nNG034006 Goronyo                    0.3062\nNG008009 Gubio                      0.0126\nNG034007 Gudu                       0.8378\nNG036007 Gujba                      0.0068\nNG036008 Gulani                     0.4835\nNG007006 Guma                       0.2372\nNG018009 Gumel                      0.8068\nNG037006 Gummi                      0.7718\nNG027009 Gurara                     0.9213\nNG018010 Guri                       0.2578\nNG037007 Gusau                      0.8546\nNG002006 Guyuk                      0.5385\nNG008010 Guzamala                   0.0058\nNG034005 Gwadabawa                  0.8728\nNG015004 Gwagwalada                 0.6628\nNG020018 Gwale                      0.6034\nNG022010 Gwandu                     0.9582\nNG018011 Gwaram                     0.5395\nNG020019 Gwarzo                     0.2128\nNG007007 Gwer East                  0.5566\nNG007008 Gwer West                  0.8925\nNG018012 Gwiwa                      0.4827\nNG008011 Gwoza                      0.0244\nNG018013 Hadejia                    0.4601\nNG008012 Hawul                      0.0259\nNG002007 Hong                       0.0182\nNG031006 Ibadan North               0.9732\nNG031007 Ibadan North East          0.4362\nNG031008 Ibadan North West          0.2311\nNG031009 Ibadan South East          0.6528\nNG031010 Ibadan South West          0.2270\nNG023006 Ibaji                      0.1243\nNG031011 Ibarapa Central            0.5077\nNG031012 Ibarapa East               0.7943\nNG031013 Ibarapa North              0.8959\nNG025009 Ibeju/Lekki                0.9724\nNG003008 Ibeno                      0.7153\nNG003009 Ibesikpo Asutan            0.9524\nNG035006 Ibi                        0.0253\nNG003010 Ibiono Ibom                0.9064\nNG023007 Idah                       0.3435\nNG029008 Idanre                     0.0325\nNG017005 Ideato North               0.0124\nNG017006 Ideato South               0.0824\nNG004010 Idemili North              0.0373\nNG004011 Idemili South              0.0223\nNG031014 Ido                        0.2632\nNG013008 Ido-Osi                    0.5717\nNG025010 Ifako-Ijaye                0.7545\nNG030011 Ife Central                0.0605\nNG030012 Ife East                   0.0285\nNG030013 Ife North                  0.0043\nNG030014 Ife South                  0.0007\nNG030015 Ifedayo                    0.0008\nNG029009 Ifedore                    0.2258\nNG024005 Ifelodun                   0.0000\nNG030016 Ifelodun                   0.0244\nNG028007 Ifo                        0.6663\nNG019004 Igabi                      0.0020\nNG023008 Igalamela-Odolu            0.0356\nNG014007 Igbo-Etiti                 0.0902\nNG014008 Igbo-Eze North             0.0900\nNG014009 Igbo-Eze South             0.0612\nNG012010 Igueben                    0.3973\nNG004012 Ihiala                     0.0529\nNG017007 Ihitte/Uboma               0.2922\nNG028008 Ijebu East                 0.0102\nNG028009 Ijebu North                0.7655\nNG028010 Ijebu North East           0.2123\nNG028011 Ijebu Ode                  0.8235\nNG013009 Ijero                      0.7566\nNG023009 Ijumu                      0.0727\nNG003011 Ika                        0.2764\nNG010007 Ika North East             0.2208\nNG010008 Ika South                  0.3616\nNG019005 Ikara                      0.1816\nNG017008 Ikeduru                    0.3766\nNG025011 Ikeja                      0.0411\nNG028012 Ikenne                     0.5119\nNG013010 Ikere                      0.4386\nNG013011 Ikole                      0.2351\nNG009012 Ikom                       0.0003\nNG003012 Ikono                      0.5449\nNG025012 Ikorodu                    0.7825\nNG003013 Ikot Abasi                 0.6458\nNG003014 Ikot Ekpene                0.9649\nNG012011 Ikpoba-Okha                0.4984\nNG033013 Ikwerre                    0.4130\nNG011007 Ikwo                       0.0051\nNG001005 Ikwuano                    0.3621\nNG030017 Ila                        0.0000\nNG029010 Ilaje                      0.8981\nNG029011 Ile-Oluji-Okeigbo          0.0025\nNG013012 Ilejemeji                  0.4061\nNG030018 Ilesha East                0.0190\nNG030019 Ilesha West                0.0171\nNG034008 Illela                     0.8558\nNG024006 Ilorin East                0.0002\nNG024007 Ilorin South               0.0002\nNG024008 Ilorin West                0.0021\nNG028013 Imeko-Afon                 0.5801\nNG021015 Ingawa                     0.9037\nNG003015 Ini                        0.4344\nNG028014 Ipokia                     0.1542\nNG029012 Irele                      0.0976\nNG031015 Irepo                      0.6599\nNG024009 Irepodun                   0.0000\nNG030020 Irepodun                   0.3727\nNG013013 Irepodun/Ifelodun          0.0542\nNG030021 Irewole                    0.0952\nNG034009 Isa                        0.5303\nNG013014 Ise/Orun                   0.4130\nNG031016 Iseyin                     0.9853\nNG011008 Ishielu                    0.2862\nNG014010 Isi-Uzo                    0.1476\nNG001006 Isiala-Ngwa North          0.9610\nNG001007 Isiala-Ngwa South          0.7687\nNG017009 Isiala Mbano               0.1032\nNG024010 Isin                       0.0000\nNG001008 Isiukwuato                 0.1431\nNG030022 Isokan                     0.1338\nNG010009 Isoko North                0.4457\nNG010010 Isoko South                0.4171\nNG017010 Isu                        0.1316\nNG005010 Itas/Gadau                 0.3774\nNG031017 Itesiwaju                  0.6711\nNG003016 Itu                        0.5833\nNG011009 Ivo                        0.2659\nNG031018 Iwajowa                    0.5198\nNG030023 Iwo                        0.9516\nNG011010 Izzi                       0.1164\nNG019006 Jaba                       0.0035\nNG002008 Jada                       0.0683\nNG018014 Jahun                      0.4102\nNG036009 Jakusko                    0.7165\nNG035007 Jalingo                    0.2874\nNG005011 Jama'are                   0.9721\nNG022011 Jega                       0.8714\nNG019007 Jema'a                     0.0680\nNG008013 Jere                       0.0283\nNG021016 Jibia                      0.2318\nNG032004 Jos East                   0.2225\nNG032005 Jos North                  0.5035\nNG032006 Jos South                  0.1328\nNG023010 Kabba/Bunu                 0.2923\nNG020020 Kabo                       0.3871\nNG019008 Kachia                     0.3561\nNG019009 Kaduna North               0.1108\nNG019010 Kaduna South               0.0101\nNG018015 Kafin Hausa                0.7562\nNG021017 Kafur                      0.5682\nNG008014 Kaga                       0.0140\nNG019011 Kagarko                    0.4198\nNG024011 Kaiama                     0.7012\nNG021018 Kaita                      0.6120\nNG031019 Kajola                     0.6884\nNG019012 Kajuru                     0.0007\nNG008015 Kala/Balge                 0.0514\nNG022012 Kalgo                      0.4448\nNG016007 Kaltungo                   0.0000\nNG032007 Kanam                      0.3672\nNG021019 Kankara                    0.5305\nNG032008 Kanke                      0.1942\nNG021020 Kankia                     0.9330\nNG020021 Kano Municipal             0.1725\nNG036010 Karasuwa                   0.4309\nNG020022 Karaye                     0.5543\nNG035008 Karim-Lamido               0.0409\nNG026004 Karu                       0.0024\nNG005012 Katagum                    0.3124\nNG027010 Katcha                     0.4919\nNG021021 Katsina                    0.3638\nNG007009 Katsina-Ala                0.0167\nNG018016 Kaugama                    0.7951\nNG019013 Kaura                      0.1031\nNG037008 Kaura Namoda               0.4063\nNG019014 Kauru                      0.1401\nNG018017 Kazaure                    0.0266\nNG026005 Keana                      0.6598\nNG034010 Kebbe                      0.5487\nNG026006 Keffi                      0.6234\nNG033014 Khana                      0.0319\nNG020023 Kibiya                     0.7116\nNG005013 Kirfi                      0.0594\nNG018018 Kiri Kasamma               0.2287\nNG020024 Kiru                       0.6448\nNG018019 Kiyawa                     0.1807\nNG023011 Kogi                       0.8945\nNG022013 Koko/Besse                 0.9812\nNG026007 Kokona                     0.2055\nNG006003 Kolokuma/Opokuma           0.5131\nNG008016 Konduga                    0.0014\nNG007010 Konshisha                  0.0174\nNG027011 Kontagora                  0.8131\nNG025013 Kosofe                     0.2263\nNG019015 Kubau                      0.2515\nNG019016 Kudan                      0.0004\nNG015005 Kuje                       0.4026\nNG008017 Kukawa                     0.0514\nNG020025 Kumbotso                   0.2784\nNG020026 Kunchi                     0.8551\nNG020027 Kura                       0.9207\nNG021022 Kurfi                      0.6883\nNG035009 Kurmi                      0.1180\nNG021023 Kusada                     0.8438\nNG015006 Kwali                      0.5925\nNG016008 Kwami                      0.0004\nNG007011 Kwande                     0.0292\nNG034011 Kware                      0.1908\nNG008018 Kwaya Kusar                0.0524\nNG026008 Lafia                      0.2101\nNG031020 Lagelu                     0.9844\nNG025014 Lagos Island               0.0345\nNG025015 Lagos Mainland             0.0267\nNG002009 Lamurde                    0.7312\nNG032009 Langtang North             0.0064\nNG032010 Langtang South             0.1389\nNG027012 Lapai                      0.5986\nNG035010 Lau                        0.4413\nNG027013 Lavun                      0.1969\nNG019017 Lere                       0.5001\nNG007012 Logo                       0.0836\nNG023012 Lokoja                     0.2772\nNG036011 Machina                    0.6304\nNG002010 Madagali                   0.0367\nNG020028 Madobi                     0.3059\nNG008019 Mafa                       0.0187\nNG027014 Magama                     0.7038\nNG008020 Magumeri                   0.0037\nNG021024 Mai'adua                   0.8704\nNG008021 Maiduguri                  0.3771\nNG018020 Maigatari                  0.3776\nNG002011 Maiha                      0.0344\nNG022014 Maiyama                    0.0746\nNG020029 Makoda                     0.6638\nNG007013 Makurdi                    0.7399\nNG018021 Malam Madori               0.0191\nNG021025 Malumfashi                 0.2261\nNG032011 Mangu                      0.0349\nNG021026 Mani                       0.6074\nNG037009 Maradun                    0.2686\nNG027015 Mariga                     0.1619\nNG019018 Markafi                    0.0246\nNG008022 Marte                      0.0244\nNG037010 Maru                       0.6276\nNG027016 Mashegu                    0.6724\nNG021027 Mashi                      0.0822\nNG021028 Matazu                     0.6332\nNG002012 Mayo-Belwa                 0.4489\nNG017011 Mbaitoli                   0.1026\nNG003017 Mbo                        0.8350\nNG002013 Michika                    0.0683\nNG018022 Miga                       0.9110\nNG032012 Mikang                     0.0057\nNG020030 Minjibir                   0.8899\nNG005014 Misau                      0.6723\nNG003018 Mkpat Enin                 0.6723\nNG013015 Moba                       0.0926\nNG008023 Mobbar                     0.0118\nNG027017 Mokwa                      0.0820\nNG008024 Monguno                    0.0118\nNG023013 Mopa-Muro                  0.7878\nNG024012 Moro                       0.0004\nNG002014 Mubi North                 0.0405\nNG002015 Mubi South                 0.0659\nNG021029 Musawa                     0.2241\nNG025016 Mushin                     0.0177\nNG027018 Muya                       0.8355\nNG016009 Nafada                     0.1379\nNG036012 Nangere                    0.7925\nNG020031 Nasarawa                   0.4299\nNG026009 Nasarawa                   0.3916\nNG026010 Nasarawa-Eggon             0.4273\nNG010011 Ndokwa East                0.0872\nNG010012 Ndokwa West                0.4058\nNG006004 Nembe                      0.1105\nNG008025 Ngala                      0.0514\nNG008026 Nganzai                    0.0098\nNG022015 Ngaski                     0.7444\nNG017012 Ngor-Okpala                0.1737\nNG036013 Nguru                      0.6990\nNG005015 Ningi                      0.6737\nNG017013 Njaba                      0.0657\nNG004013 Njikoka                    0.0459\nNG014011 Nkanu East                 0.7944\nNG014012 Nkanu West                 0.0238\nNG017014 Nkwerre                    0.0259\nNG004014 Nnewi North                0.0708\nNG004015 Nnewi South                0.0141\nNG003019 Nsit Atai                  0.9928\nNG003020 Nsit Ibom                  0.8346\nNG003021 Nsit Ubium                 0.7984\nNG014013 Nsukka                     0.0522\nNG002016 Numan                      0.2644\nNG017015 Nwangele                   0.0926\nNG028015 Obafemi-Owode              0.1994\nNG009013 Obanliku                   0.0184\nNG007014 Obi                        0.8644\nNG026011 Obi                        0.5730\nNG001009 Obi Ngwa                   0.7138\nNG033015 Obia/Akpor                 0.0076\nNG030024 Obokun                     0.0255\nNG003022 Obot Akara                 0.8230\nNG017016 Obowo                      0.3212\nNG009014 Obubra                     0.0461\nNG009015 Obudu                      0.0122\nNG028016 Odeda                      0.4298\nNG029013 Odigbo                     0.6540\nNG030025 Odo-Otin                   0.0008\nNG028017 Odogbolu                   0.9621\nNG009016 Odukpani                   0.7672\nNG024013 Offa                       0.0001\nNG023014 Ofu                        0.8834\nNG033016 Ogba/Egbema/Ndoni          0.2236\nNG007015 Ogbadibo                   0.1646\nNG004016 Ogbaru                     0.0354\nNG006005 Ogbia                      0.1186\nNG031021 Ogbomosho North            0.3328\nNG031022 Ogbomosho South            0.3606\nNG031023 Ogo Oluwa                  0.0855\nNG009017 Ogoja                      0.0004\nNG023015 Ogori/Magongo              0.9812\nNG033017 Ogu/Bolo                   0.0135\nNG028018 Ogun waterside             0.3340\nNG017017 Oguta                      0.0891\nNG001010 Ohafia                     0.4618\nNG017018 Ohaji/Egbema               0.0750\nNG011011 Ohaozara                   0.7966\nNG011012 Ohaukwu                    0.3737\nNG007016 Ohimini                    0.5489\nNG014014 Oji-River                  0.0142\nNG025017 Ojo                        0.0292\nNG007017 Oju                        0.1621\nNG024014 Oke-Ero                    0.0000\nNG023016 Okehi                      0.7727\nNG023017 Okene                      0.5224\nNG017019 Okigwe                     0.0291\nNG029014 Okitipupa                  0.2407\nNG003023 Okobo                      0.6316\nNG010013 Okpe                       0.1752\nNG007018 Okpokwu                    0.5989\nNG033018 Okrika                     0.0194\nNG030026 Ola-oluwa                  0.1972\nNG023018 Olamabolo                  0.2764\nNG030027 Olorunda                   0.0120\nNG031024 Olorunsogo                 0.6473\nNG031025 Oluyole                    0.2966\nNG023019 Omala                      0.3751\nNG033019 Omumma                     0.4210\nNG031026 Ona-Ara                    0.4769\nNG029015 Ondo East                  0.0041\nNG029016 Ondo West                  0.0311\nNG011013 Onicha                     0.1739\nNG004017 Onitsha North              0.0382\nNG004018 Onitsha South              0.1192\nNG003024 Onna                       0.7188\nNG033020 Opobo/Nkoro                0.2646\nNG012012 Oredo                      0.6646\nNG031027 Orelope                    0.7811\nNG012013 Orhionmwon                 0.0485\nNG031028 Ori Ire                    0.5973\nNG030028 Oriade                     0.0067\nNG017020 Orlu                       0.0282\nNG030029 Orolu                      0.2638\nNG003025 Oron                       0.4623\nNG017021 Orsu                       0.0694\nNG017022 Oru East                   0.1188\nNG017023 Oru West                   0.6748\nNG003026 Oruk Anam                  0.7895\nNG004019 Orumba North               0.0607\nNG004020 Orumba South               0.0549\nNG029017 Ose                        0.0421\nNG010014 Oshimili North             0.0693\nNG010015 Oshimili South             0.0365\nNG025018 Oshodi-Isolo               0.1634\nNG001011 Osisioma Ngwa              0.9694\nNG030030 Osogbo                     0.0584\nNG007019 Oturkpo                    0.8569\nNG012014 Ovia North East            0.6874\nNG012015 Ovia South West            0.1768\nNG012016 Owan East                  0.9620\nNG012017 Owan West                  0.9521\nNG017026 Owerri-Municipal           0.5252\nNG017024 Owerri North               0.0743\nNG017025 Owerri West                0.3668\nNG029018 Owo                        0.2589\nNG013016 Oye                        0.6528\nNG004021 Oyi                        0.0531\nNG033021 Oyigbo                     0.3569\nNG031029 Oyo East                   0.5421\nNG031030 Oyo West                   0.5500\nNG024015 Oyun                       0.0000\nNG027019 Paikoro                    0.7003\nNG032013 Pankshin                   0.0010\nNG010016 Patani                     0.1789\nNG024016 Pategi                     0.1504\nNG033022 Port-Harcourt              0.1064\nNG036014 Potiskum                   0.1519\nNG032014 Qua'an Pan                 0.0057\nNG034012 Rabah                      0.2253\nNG027020 Rafi                       0.2411\nNG020032 Rano                       0.9029\nNG028019 Remo North                 0.1754\nNG027021 Rijau                      0.6223\nNG021030 Rimi                       0.2178\nNG020033 Rimin Gado                 0.1331\nNG018023 Ringim                     0.9221\nNG032015 Riyom                      0.0123\nNG020034 Rogo                       0.7134\nNG018024 Roni                       0.9928\nNG019019 Sabon-Gari                 0.0000\nNG034013 Sabon Birni                0.2911\nNG021031 Sabuwa                     0.0045\nNG021032 Safana                     0.9185\nNG006006 Sagbama                    0.0497\nNG022016 Sakaba                     0.3967\nNG031031 Saki East                  0.9325\nNG031032 Saki West                  0.8366\nNG021033 Sandamu                    0.3866\nNG019020 Sanga                      0.0076\nNG010017 Sapele                     0.2063\nNG035011 Sardauna                   0.2239\nNG028020 Shagamu                    0.6084\nNG034014 Shagari                    0.7454\nNG022017 Shanga                     0.7845\nNG008027 Shani                      0.7360\nNG020035 Shanono                    0.3037\nNG002017 Shelleng                   0.0092\nNG032016 Shendam                    0.0319\nNG037011 Shinkafi                   0.5049\nNG005016 Shira                      0.5625\nNG027022 Shiroro                    0.6114\nNG016010 Shomgom                    0.0204\nNG025019 Shomolu                    0.0393\nNG034015 Silame                     0.8555\nNG019021 Soba                       0.0008\nNG034016 Sokoto North               0.6186\nNG034017 Sokoto South               0.5293\nNG002018 Song                       0.0077\nNG006007 Southern Ijaw              0.1512\nNG018025 Sule-Tankarkar             0.0005\nNG027023 Suleja                     0.8762\nNG020036 Sumaila                    0.6777\nNG022018 Suru                       0.0223\nNG025020 Surulere                   0.0098\nNG031033 Surulere                   0.0010\nNG027024 Tafa                       0.2996\nNG005017 Tafawa-Balewa              0.2444\nNG033023 Tai                        0.0243\nNG020037 Takai                      0.8236\nNG035012 Takum                      0.1606\nNG037012 Talata Mafara              0.3930\nNG034018 Tambuwal                   0.7063\nNG034019 Tangaza                    0.6007\nNG020038 Tarauni                    0.4860\nNG007020 Tarka                      0.1216\nNG036015 Tarmua                     0.0445\nNG018026 Taura                      0.5412\nNG020039 Tofa                       0.1299\nNG005018 Toro                       0.5766\nNG026012 Toto                       0.2104\nNG002019 Toungo                     0.6618\nNG037013 Tsafe                      0.7937\nNG020040 Tsanyawa                   0.3728\nNG020041 Tudun Wada                 0.4267\nNG034020 Tureta                     0.1977\nNG014015 Udenu                      0.1671\nNG014016 Udi                        0.0091\nNG010018 Udu                        0.1317\nNG003027 Udung Uko                  0.4951\nNG010019 Ughelli North              0.1065\nNG010020 Ughelli South              0.0139\nNG001012 Ugwunagbo                  0.5399\nNG012018 Uhunmwonde                 0.7183\nNG003028 Ukanafun                   0.5947\nNG007021 Ukum                       0.0919\nNG001013 Ukwa East                  0.5737\nNG001014 Ukwa West                  0.2726\nNG010021 Ukwuani                    0.5949\nNG001017 Umu-Nneochi                0.0394\nNG001015 Umuahia North              0.2632\nNG001016 Umuahia South              0.3978\nNG020042 Ungogo                     0.2272\nNG017027 Unuimo                     0.0903\nNG003029 Uruan                      0.5049\nNG003030 Urue-Offong/Oruko          0.8091\nNG007022 Ushongo                    0.1168\nNG035013 Ussa                       0.0526\nNG010022 Uvwie                      0.0924\nNG003031 Uyo                        0.7910\nNG014017 Uzo-Uwani                  0.0402\nNG007023 Vandeikya                  0.0123\nNG034021 Wamako                     0.5191\nNG026013 Wamba                      0.1106\nNG020043 Warawa                     0.9995\nNG005019 Warji                      0.1396\nNG010023 Warri North                0.2455\nNG010024 Warri South                0.0316\nNG010025 Warri South West           0.0971\nNG022019 Wasagu/Danko               0.7594\nNG032017 Wase                       0.2408\nNG020044 Wudil                      0.8637\nNG035014 Wukari                     0.1118\nNG034022 Wurno                      0.6415\nNG027025 Wushishi                   0.8135\nNG034023 Yabo                       0.5548\nNG023020 Yagba East                 0.1843\nNG023021 Yagba West                 0.0000\nNG009018 Yakurr                     0.1374\nNG009019 Yala                       0.0274\nNG016011 Yamaltu/Deba               0.0358\nNG018027 Yankwashi                  0.0885\nNG022020 Yauri                      0.4258\nNG006008 Yenegoa                    0.0982\nNG002020 Yola North                 0.1563\nNG002021 Yola South                 0.0171\nNG035015 Yorro                      0.2580\nNG036016 Yunusari                   0.0523\nNG036017 Yusufari                   0.1154\nNG005020 Zaki                       0.4375\nNG021034 Zango                      0.0614\nNG019022 Zango-Kataf                0.0248\nNG019023 Zaria                      0.0000\nNG035016 Zing                       0.5526\nNG037014 Zurmi                      0.2935\nNG022021 Zuru                       0.4615\n\n\n\nMapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto nga_wp SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called nga_wp.localMI.\n\nnga_wp.localMI <- cbind(nga_wp,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran's Statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as considered above. The code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\nlocalMI.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"Local Moran's Statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(scale = 0.7)\n\npvalue.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(scale = 0.7)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "href": "Take-home_Ex/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations. The code chunk below plots the Moran scatterplot of non-functional water points by using moran.plot() of spdep.\n\nnci <- moran.plot(nga_wp$`wpt non-functional`, rswm_q,\n                  labels=as.character(nga_wp$ADM2_EN), \n                  xlab=\"Non-functional Water Points\", \n                  ylab=\"Spatially Lag Non-functional Water Points\")\n\n\n\n\nNotice that the plot is split into 4 quadrants. The top right corner belongs to areas that have high numbers of non-functional water points and are surrounded by other areas that have the average numbers of non-functional water points. These are the high-high locations.\n\n\nPlotting Moran scatterplot with standardised variable\nThe code below is used to plot the Moran scatterplot after applying scale() to centers and scales the variable wpt non-functional.\n\nnga_wp$Z.NFWP <- scale(nga_wp$`wpt non-functional`) %>% as.vector\n\nnci2 <- moran.plot(nga_wp$Z.NFWP, rswm_q,\n                   labels=as.character(nga_wp$ADM2_EN),\n                   xlab=\"z-Non-functional Water Points\", \n                   ylab=\"Spatially Lag z-Non-functional Water Points\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below shows the steps to prepare a LISA cluster map which involves the following:\n\nTo derive the spatially lagged variable of interest (i.e. wpt non-functional) and center the spatially lagged variable around its mean\nTo center the local Moran's around the mean\nTo set a statistical significance level for the local Moran\nTo define the high-high, low-low, low-high and high-low categories\nTo places non-significant Moran in the category 0\n\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nnga_wp$lag_NFWP <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)\nDV <- nga_wp$lag_NFWP - mean(nga_wp$lag_NFWP)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0\n\n\n\nPlotting LISA map\nThe code chunk below is used to build the LISA map.\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot the choropleth map showing the non-functional water points distribution and the LISA map next to each other.\n\nnfwpc <- qtm(nga_wp, \"wpt non-functional\") +\n  tm_layout(scale = 0.7)\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) +\n  tm_layout(scale = 0.7)\n\ntmap_arrange(nfwpc, LISAmap, asp=1, ncol=2)\n\n\n\n\nWe can see from the LISA map that there’s a high-high cluster indicating positive autocorrelation for the LGAs having adjacent high numbers of non-functional water points. There is also a low-high cluster indicating negative autocorrelation/outliers whereby those LGAs with low numbers of non-functional water points are surrounded by those with high numbers of non-functional water points"
  }
]