---
title: "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation"
editor: visual
---

## Overview

In this hands-on exercise, wewill learn to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using **spdep** package. By the end of this exercise, we will be able to:

-   import geospatial data using appropriate function(s) of **sf** package

-   import csv file using appropriate function of **readr** package

-   perform relational join using appropriate join function of **dplyr** package

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package

    -   plot Moran scatterplot

    -   compute and plot spatial correlogram using appropriate function of **spdep** package

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package

-   compute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package

-   visualise the analysis output by using **tmap** package

## Getting Started

### The analytical question

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study is to apply appropriate spatial statistical methods to discover if development are evenly distributed geographically. If the answer is **No**. Then, our next question will be "is there sign of spatial clustering?". And, if the answer for this question is yes, then our next question will be "where are these clusters?"

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e.Â GDP per capita) of [Hunan](https://en.wikipedia.org/wiki/Hunan) Province, People Republic of China.

### The Study Area and Data

Two data sets will be used in this hands-on exercise:

-   `Hunan` province administrative boundary layer at county level - a geospatial data set in ESRI shapefile format.

-   `Hunan_2012.csv` - a csv file containing selected Hunan's local development indicators in 2012.

### Setting the Analytical Tools

Before we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in R.

-   **sf** is use for importing and handling geospatial data in R

-   **tidyverse** is mainly use for wrangling attribute data in R

-   **spdep** is used to compute spatial weights, global and local spatial autocorrelation statistics

-   **tmap** is used to prepare cartographic quality choropleth map

The code chunk below is used to perform the following tasks:

-   creating a package list containing the necessary R packages

-   checking if the R packages in the package list have been installed in R

    -   if they have yet to be installed, RStudio will install the missing packages

-   launching the packages into R environment

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Getting the Data Into R Environment

In this section, we will learn to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

### Import shapefile into R environment

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import `Hunan` shapefile into R. The imported shapefile will be a simple features object of **sf**.

(Since we have previously used this data set in the in-class exercise, we will use the data directly from there.)

```{r}
hunan <- st_read(dsn = "C:/Jacobche/ISSS624/In-class_Ex/In-class_Ex1/data/geospatial", 
                 layer = "Hunan")
```

### Import csv file into R environment

Next, we will import `Hunan_2012.csv` into R by using *read_csv()* of **readr** package. The output is R data frame class.

```{r}
hunan2012 <- read_csv("C:/Jacobche/ISSS624/In-class_Ex/In-class_Ex1/data/aspatial/Hunan_2012.csv")
```

### Performing relational join

The code chunk below is used to update the attribute table of `hunan`'s SpatialPolygonsDataFrame with the attribute fields of `hunan2012` dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012)
```

### Visualising Regional Development Indicator

The code chunk below uses *tm_shape()* of **tmap** package to plot two choropleth maps showing the distribution of `GDPPC` 2012 but using different data classification methods.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```
