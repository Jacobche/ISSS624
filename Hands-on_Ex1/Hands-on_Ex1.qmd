---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I will learn to handle geospatial data in R by using appropriate R packages.

## Installing & Lauching R Packages

The code chunk below installs and loads [**sf**](https://r-spatial.github.io/sf/) and [**tidyverse**](https://tidyverse.tidyverse.org/) packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

## Import Geospatial Data

### Import polygon feature data in shapefile format

The code chunk below imports the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package and save it as a polygon feature data frame called `mpsz`.

```{r}
mpsz = st_read(dsn = "data/geospatial", 
               layer = "MP14_SUBZONE_WEB_PL")
```

The message reveals that there are a total of 323 multipolygon features and 15 fields in `mpsz` which is in **svy21** projected coordinates system.

### Import polyline feature data in shapefile format

The code chunk below imports the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package and save it as a line feature data frame called `cyclingpath`.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                      layer = "CyclingPath")
```

The message reveals that there are a total of 1625 features and 2 fields in `cyclingpath` which is in **svy21** projected coordinates system.

### Import GIS data in kml format

The code chunk below imports the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package and save it as a point feature data frame called `preschool`.

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

The message reveals that there are a total of 1359 features and 2 fields in `preschool` which is in **wgs84** coordinates system.

## Checking Data Content

The code chunk below displays the basic information of the feature class by using [*st_geometry()*](https://r-spatial.github.io/sf/reference/st_geometry.html) of **sf** package.

```{r}
st_geometry(mpsz)
```

The code chunk below displays the associated attribute information in the data frame by using [*glimpse()*](https://dplyr.tidyverse.org/reference/glimpse.html) of [**dplyr**](https://dplyr.tidyverse.org/) package.

```{r}
glimpse(mpsz)
```

The code chunk below reveals the complete information of a feature object by using [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R.

```{r}
head(mpsz, n=5)  
```

## Plotting the Geospatial Data

We will first visualize some of the geospatial features using [*plot()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/plot) of the R Graphics Package.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above.

We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose to plot the sf object by using a specific attribute like `PLN_AREA_N`, as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

Note that *plot()* is meant for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as **tmap** should be used.

## Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, we will learn how to project a simple feature data frame from one coordinate system to another coordinate system, and this process is known as **projection transformation**.

### Assigning EPSG code to a simple feature data frame

One of the common issues that may happen when importing geospatial data into R is that the coordinate system of the source data is either missing (such as missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

The code chunk below uses [*st_crs()*](https://r-spatial.github.io/sf/reference/st_crs.html) of **sf** package on the coordinate system of `mpsz` simple feature data frame.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in **svy21** but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for **svy21** should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

We will now verify that the EPSG code for `mpsz3414` has been corrected to 3414 by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis needs to use distance or/and area measurements.

Previously, we found out that the `preschool` simple feature data frame is in **wgs84** coordinates system. However, *st_set_crs()* is not appropriate to be used here because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically. As such, [*st_transform()*](https://r-spatial.github.io/sf/reference/st_transform.html) of **sf** package should be used instead and the projection transformation is performed by using the code chunk below.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

```{r}
st_geometry(preschool3414)
```

We have verified that the `preschool3414` is in **svy21** projected coordinate system now.

## Importing and Converting Aspatial Data

In practice, it is not unusual that we come across data such as `listing` of Inside Airbnb. We call this kind of data **aspatial data**. Different from geospatial data, aspacial data consists of two fields that capture the x- and y-coordinates of the data points.

In this section, we will learn about how to import an aspatial data into R environment and save it as a tibble data frame. Next, we will convert it into a simple feature data frame. For the purpose of this exercise, the `listings.csv` data downloaded from Airbnb will be used.

### Importing the aspatial data

Since `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

To examine if the data file has been imported correctly, we can use [list()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/list) of Base R by using the code chunk below.

```{r}
list(listings)
```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields detected are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

### Creating a simple feature data frame from aspatial data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** package.

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude", "latitude"),
                        crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments in the code chunk above:

-   *coords* argument requires us to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires us to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is **wgs84** Geographic Coordinate System while [EPSG: 3414](https://epsg.io/3414) is Singapore **svy21** Projected Coordinate System. We can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into **svy21** projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Notice that a new column called `geometry` has been added into the `listing_sf` data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## Geoprocessing with sf package

Besides providing functions to handling (i.e.Â importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, we will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### Buffering

[Scenario]{.underline}

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. We are being tasked to determine the extend of the land need to be acquired and their total area.

[Solution]{.underline}

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(cyclingpath,
                            dist=5, nQuadSegs = 30)
```

Next, the area of the buffers is calculated using [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, [*sum()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/sum) of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

[Scenario]{.underline}

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

[Solution]{.underline}

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [*st_intersects()*](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each Planning Subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

We can check the summary statistics of the newly derived `PreSch Count` field by using [*summary()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/summary) as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the Planning Subzone with the most number of pre-schools, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

From the output, `WOODLANDS EAST` is the Planning Subzone with the most number of pre-schools.

[To calculate the density of pre-schools by Planning Subzone]{.underline}

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of **dplyr** package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

To list the Planning Subzone with the greatest density of pre-schools, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Density`)
```

From the output, `ANSON` is the Planning Subzone with the greatest density of pre-schools.

## Explorotary Data Analysis

In practice, many geospatial analytics start with Exploratory Data Analysis (EDA). In this section, we will learn how to use appropriate [**ggplot2**](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, [*hist()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use, however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-schools evenly distributed in Singapore?",
       subtitle= "Right-tailed distribution \nThere are many planning subzones with a single pre-school",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

The code chunk below uses **ggplot2** method to plot a scatterplot, showing the relationship between Pre-school Density and Pre-school Count.

```{r}
ggplot(data=mpsz3414, aes(x= as.numeric(`PreSch Density`), y=`PreSch Count`)) + 
    geom_point() +
  labs(title = "Are Pre-school Density and Pre-school Count positively correlated ?",
      x = "Pre-school density (per km sq)",
      y = "Pre-schook count") +
  xlim(0, 40) +
  ylim(0, 40)
```

From the output, it does seem that `Pre-school Density` and `Pre-school Count` are positively correlated.
