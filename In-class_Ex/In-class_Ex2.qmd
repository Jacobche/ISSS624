---
title: "In-class_Exercise 2"
execute: 
  warning: false
  message: false
editor: visual
---

## Overview

In this exercise, we are to find out if functionally similar water points positively co-occur in Nigeria.

## Getting Started

In the code chunk below, *p_load()* of **pacman** package is used to install and load the following R packages into R environment:

-   **sf**

-   **tidyverse**

-   **tmap**

-   **spdep**

-   **funModeling**, to be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
```

## Importing Geospatial Data

In this in-class exercise, two geospatial data sets will be used, they:

-   `geo_export`

-   `nga_admbnda_adm2_osgof_20190417`

### Importing water point geospatial data

First, we are going to import the water point geospatial data (i.e. `geo_export`) by using the code chunk below.

```{r}
# eval: false
wp <- st_read(dsn = "rawdata",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Things to learn from the code chunk above:

-   *st_read()* of **sf** package is used to import `geo_export` shapefile into R environment and save the imported geospatial data into simple feature data table.

-   *filter()* of **dplyr** package is used to extract water point records of Nigeria only.

Note: Avoid performing transformation if you plan to use *st_intersects()* of **sf** package in the later stage of the geoprocessing. This is because *st_intersects()* only works correctly if the geospatial data are in geographic coordinate system (i.e **wgs84**).

Next, *write_rds()* of **readr** package is used to save the extracted sf data table (i.e. `wp`) into an output file in rds data format. The output file is called `wp_nga.rds` and it is saved in rawdata sub-folder, which will not be uploaded to Git.

```{r}
# eval: false
wp_nga <- write_rds(wp,
                    "rawdata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

Now, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r}
nga <- st_read(dsn = "data",
               layer = "geoBoundaries-NGA-ADM2",
               crs = 4326)
```

Thing to learn from the code chunk above.

-   *st_read()* of **sf** package is used to import `geoBoundaries-NGA-ADM2` shapefile into R environment and save the imported geospatial data into simple feature data table.

## Data Wrangling

### Recoding NA values into string

In the code chunk below, *replace_na()* is used to recode all the *NA* values in `status_cle` field into *Unknown*.

```{r}
wp_nga <- read_rds("rawdata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### Exploratory Data Analysis

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wp_nga`.

```{r}
freq(data=wp_nga, 
     input = 'status_cle')
```

## Extracting Water Point Data

In this section, we will extract the water point records by using classes in `status_cle` field.

### Extracting funtional water point

In the code chunk below, *filter()* of **dplyr** is used to select functional water points.

```{r}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

### Exploratory Data Analysis (functional)

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wpt_functional`.

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

### Extracting non-functional water point

In the code chunk below, *filter()* of **dplyr** is used to select non-functional water points.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

### Exploratory Data Analysis (non-functional)

In the code chunk below, *freq()* of **funModeling** package is used to display the distribution of `status_cle` field in `wpt_nonfunctional`.

```{r}
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### Extracting water point with Unknown class

In the code chunk below, *filter()* of **dplyr** is used to select water points with unknown status.

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing Point-in-Polygon Count

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)
```

Things to learn from the code chunk above:

-   *mutate()* of **dplyr** package is used to derive two fields namely `pct_functional` and `pct_non-functional`.

-   to keep the file size small, `select()` of **dplyr** is used to retain only field 3,4,9,10,18,19,20,21,22,and 23.

Now, wehave the tidy sf data table for subsequent analysis. We will save the sf data table into rds format.

```{r}
write_rds(nga_wp, "data/nga_wp.rds")
```

## Visualising the spatial dsitribution of water points

```{r}
nga_wp <- read_rds("data/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```
